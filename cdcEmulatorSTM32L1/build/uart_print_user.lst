ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"uart_print_user.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.initUart,"ax",%progbits
  16              		.align	1
  17              		.global	initUart
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	initUart:
  25              	.LFB832:
  26              		.file 1 "user/src/uart_print_user.c"
   1:user/src/uart_print_user.c **** /**
   2:user/src/uart_print_user.c ****  ******************************************************************************
   3:user/src/uart_print_user.c ****  * File Name          : uart_print_user
   4:user/src/uart_print_user.c ****  * Description        : This file provides simple intarface to send strings,
   5:user/src/uart_print_user.c ****  * 											numbers over UART.
   6:user/src/uart_print_user.c ****  * @date    07-Oct-2019
   7:user/src/uart_print_user.c ****  * @author  Domen Jurkovic
   8:user/src/uart_print_user.c ****  * @version v1.1
   9:user/src/uart_print_user.c ****  *
  10:user/src/uart_print_user.c ****  * Copyright (c) 2019, damogranlabs.com
  11:user/src/uart_print_user.c ****  *
  12:user/src/uart_print_user.c ****  * All rights reserved.
  13:user/src/uart_print_user.c ****  * 
  14:user/src/uart_print_user.c ****  * Redistribution and use in source and binary forms, with or without 
  15:user/src/uart_print_user.c ****  * modification, are permitted provided that the following conditions are met:
  16:user/src/uart_print_user.c ****  *
  17:user/src/uart_print_user.c ****  * 1. Redistributions of source code must retain the above copyright notice, 
  18:user/src/uart_print_user.c ****  *    this list of conditions and the following disclaimer.
  19:user/src/uart_print_user.c ****  * 
  20:user/src/uart_print_user.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  21:user/src/uart_print_user.c ****  *    this list of conditions and the following disclaimer in the documentation
  22:user/src/uart_print_user.c ****  *    and/or other materials provided with the distribution.
  23:user/src/uart_print_user.c ****  *
  24:user/src/uart_print_user.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
  25:user/src/uart_print_user.c ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
  26:user/src/uart_print_user.c ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
  27:user/src/uart_print_user.c ****  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
  28:user/src/uart_print_user.c ****  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
  29:user/src/uart_print_user.c ****  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
  30:user/src/uart_print_user.c ****  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
  31:user/src/uart_print_user.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
  32:user/src/uart_print_user.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 2


  33:user/src/uart_print_user.c ****  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  34:user/src/uart_print_user.c ****  * POSSIBILITY OF SUCH DAMAGE.
  35:user/src/uart_print_user.c ****  *
  36:user/src/uart_print_user.c ****  * @source  http://damogranlabs.com/
  37:user/src/uart_print_user.c ****  *          https://github.com/damogranlabs
  38:user/src/uart_print_user.c ****  * 
  39:user/src/uart_print_user.c ****  * How to use:
  40:user/src/uart_print_user.c ****  * 1. Include correct files. See HARDWARE INIT FUNCTIONS
  41:user/src/uart_print_user.c ****  * 2. Fill sendData() and receiveByte()
  42:user/src/uart_print_user.c ****  */
  43:user/src/uart_print_user.c **** #include "uart_print.h"
  44:user/src/uart_print_user.c **** #include "uart_print_user.h"
  45:user/src/uart_print_user.c **** 
  46:user/src/uart_print_user.c **** /****************************************************************************************/
  47:user/src/uart_print_user.c **** /* HARDWARE INIT FUNCTIONS - change accordingly to your HW */
  48:user/src/uart_print_user.c **** /****************************************************************************************/
  49:user/src/uart_print_user.c **** #include "usart.h"
  50:user/src/uart_print_user.c **** 
  51:user/src/uart_print_user.c **** #include "io.h"
  52:user/src/uart_print_user.c **** #include "stm32l1xx_it.h"
  53:user/src/uart_print_user.c **** 
  54:user/src/uart_print_user.c **** void initUart(void){
  27              		.loc 1 54 20 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 08B5     		push	{r3, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 3, -8
  35              		.cfi_offset 14, -4
  55:user/src/uart_print_user.c **** 	// init cdcEmulator <-> PC UART
  56:user/src/uart_print_user.c **** 	NVIC_ClearPendingIRQ(USART1_IRQn);
  36              		.loc 1 56 2 view .LVU1
  37              	.LVL0:
  38              	.LBB16:
  39              	.LBI16:
  40              		.file 2 "Drivers/CMSIS/Include/core_cm3.h"
   1:Drivers/CMSIS/Include/core_cm3.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm3.h ****  * @file     core_cm3.h
   3:Drivers/CMSIS/Include/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm3.h ****  * @version  V5.0.8
   5:Drivers/CMSIS/Include/core_cm3.h ****  * @date     04. June 2018
   6:Drivers/CMSIS/Include/core_cm3.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm3.h **** /*
   8:Drivers/CMSIS/Include/core_cm3.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm3.h ****  *
  10:Drivers/CMSIS/Include/core_cm3.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm3.h ****  *
  12:Drivers/CMSIS/Include/core_cm3.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm3.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm3.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm3.h ****  *
  16:Drivers/CMSIS/Include/core_cm3.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm3.h ****  *
  18:Drivers/CMSIS/Include/core_cm3.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm3.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 3


  20:Drivers/CMSIS/Include/core_cm3.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm3.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm3.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm3.h ****  */
  24:Drivers/CMSIS/Include/core_cm3.h **** 
  25:Drivers/CMSIS/Include/core_cm3.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm3.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm3.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm3.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm3.h **** #endif
  30:Drivers/CMSIS/Include/core_cm3.h **** 
  31:Drivers/CMSIS/Include/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm3.h **** 
  34:Drivers/CMSIS/Include/core_cm3.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm3.h **** 
  36:Drivers/CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm3.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm3.h **** #endif
  39:Drivers/CMSIS/Include/core_cm3.h **** 
  40:Drivers/CMSIS/Include/core_cm3.h **** /**
  41:Drivers/CMSIS/Include/core_cm3.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm3.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm3.h **** 
  44:Drivers/CMSIS/Include/core_cm3.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm3.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm3.h **** 
  47:Drivers/CMSIS/Include/core_cm3.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm3.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm3.h **** 
  50:Drivers/CMSIS/Include/core_cm3.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm3.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm3.h ****  */
  53:Drivers/CMSIS/Include/core_cm3.h **** 
  54:Drivers/CMSIS/Include/core_cm3.h **** 
  55:Drivers/CMSIS/Include/core_cm3.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm3.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm3.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm3.h **** /**
  59:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup Cortex_M3
  60:Drivers/CMSIS/Include/core_cm3.h ****   @{
  61:Drivers/CMSIS/Include/core_cm3.h ****  */
  62:Drivers/CMSIS/Include/core_cm3.h **** 
  63:Drivers/CMSIS/Include/core_cm3.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm3.h **** 
  65:Drivers/CMSIS/Include/core_cm3.h **** /*  CMSIS CM3 definitions */
  66:Drivers/CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm3.h ****                                     __CM3_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm3.h **** 
  71:Drivers/CMSIS/Include/core_cm3.h **** #define __CORTEX_M                (3U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm3.h **** 
  73:Drivers/CMSIS/Include/core_cm3.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm3.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm3.h **** */
  76:Drivers/CMSIS/Include/core_cm3.h **** #define __FPU_USED       0U
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 4


  77:Drivers/CMSIS/Include/core_cm3.h **** 
  78:Drivers/CMSIS/Include/core_cm3.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm3.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm3.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm3.h **** 
  83:Drivers/CMSIS/Include/core_cm3.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm3.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm3.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm3.h **** 
  88:Drivers/CMSIS/Include/core_cm3.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm3.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm3.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm3.h **** 
  93:Drivers/CMSIS/Include/core_cm3.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm3.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm3.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm3.h **** 
  98:Drivers/CMSIS/Include/core_cm3.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm3.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm3.h **** 
 103:Drivers/CMSIS/Include/core_cm3.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm3.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm3.h **** 
 108:Drivers/CMSIS/Include/core_cm3.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm3.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm3.h **** 
 113:Drivers/CMSIS/Include/core_cm3.h **** #endif
 114:Drivers/CMSIS/Include/core_cm3.h **** 
 115:Drivers/CMSIS/Include/core_cm3.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm3.h **** 
 117:Drivers/CMSIS/Include/core_cm3.h **** 
 118:Drivers/CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm3.h **** }
 120:Drivers/CMSIS/Include/core_cm3.h **** #endif
 121:Drivers/CMSIS/Include/core_cm3.h **** 
 122:Drivers/CMSIS/Include/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm3.h **** 
 124:Drivers/CMSIS/Include/core_cm3.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm3.h **** 
 126:Drivers/CMSIS/Include/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm3.h **** 
 129:Drivers/CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm3.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm3.h **** #endif
 132:Drivers/CMSIS/Include/core_cm3.h **** 
 133:Drivers/CMSIS/Include/core_cm3.h **** /* check device defines and use defaults */
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 5


 134:Drivers/CMSIS/Include/core_cm3.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm3.h ****   #ifndef __CM3_REV
 136:Drivers/CMSIS/Include/core_cm3.h ****     #define __CM3_REV               0x0200U
 137:Drivers/CMSIS/Include/core_cm3.h ****     #warning "__CM3_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm3.h **** 
 140:Drivers/CMSIS/Include/core_cm3.h ****   #ifndef __MPU_PRESENT
 141:Drivers/CMSIS/Include/core_cm3.h ****     #define __MPU_PRESENT             0U
 142:Drivers/CMSIS/Include/core_cm3.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm3.h **** 
 145:Drivers/CMSIS/Include/core_cm3.h ****   #ifndef __NVIC_PRIO_BITS
 146:Drivers/CMSIS/Include/core_cm3.h ****     #define __NVIC_PRIO_BITS          3U
 147:Drivers/CMSIS/Include/core_cm3.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm3.h **** 
 150:Drivers/CMSIS/Include/core_cm3.h ****   #ifndef __Vendor_SysTickConfig
 151:Drivers/CMSIS/Include/core_cm3.h ****     #define __Vendor_SysTickConfig    0U
 152:Drivers/CMSIS/Include/core_cm3.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 153:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 154:Drivers/CMSIS/Include/core_cm3.h **** #endif
 155:Drivers/CMSIS/Include/core_cm3.h **** 
 156:Drivers/CMSIS/Include/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
 157:Drivers/CMSIS/Include/core_cm3.h **** /**
 158:Drivers/CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 159:Drivers/CMSIS/Include/core_cm3.h **** 
 160:Drivers/CMSIS/Include/core_cm3.h ****     <strong>IO Type Qualifiers</strong> are used
 161:Drivers/CMSIS/Include/core_cm3.h ****     \li to specify the access to peripheral variables.
 162:Drivers/CMSIS/Include/core_cm3.h ****     \li for automatic generation of peripheral register debug information.
 163:Drivers/CMSIS/Include/core_cm3.h **** */
 164:Drivers/CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
 165:Drivers/CMSIS/Include/core_cm3.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 166:Drivers/CMSIS/Include/core_cm3.h **** #else
 167:Drivers/CMSIS/Include/core_cm3.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 168:Drivers/CMSIS/Include/core_cm3.h **** #endif
 169:Drivers/CMSIS/Include/core_cm3.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 170:Drivers/CMSIS/Include/core_cm3.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 171:Drivers/CMSIS/Include/core_cm3.h **** 
 172:Drivers/CMSIS/Include/core_cm3.h **** /* following defines should be used for structure members */
 173:Drivers/CMSIS/Include/core_cm3.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 174:Drivers/CMSIS/Include/core_cm3.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 175:Drivers/CMSIS/Include/core_cm3.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 176:Drivers/CMSIS/Include/core_cm3.h **** 
 177:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group Cortex_M3 */
 178:Drivers/CMSIS/Include/core_cm3.h **** 
 179:Drivers/CMSIS/Include/core_cm3.h **** 
 180:Drivers/CMSIS/Include/core_cm3.h **** 
 181:Drivers/CMSIS/Include/core_cm3.h **** /*******************************************************************************
 182:Drivers/CMSIS/Include/core_cm3.h ****  *                 Register Abstraction
 183:Drivers/CMSIS/Include/core_cm3.h ****   Core Register contain:
 184:Drivers/CMSIS/Include/core_cm3.h ****   - Core Register
 185:Drivers/CMSIS/Include/core_cm3.h ****   - Core NVIC Register
 186:Drivers/CMSIS/Include/core_cm3.h ****   - Core SCB Register
 187:Drivers/CMSIS/Include/core_cm3.h ****   - Core SysTick Register
 188:Drivers/CMSIS/Include/core_cm3.h ****   - Core Debug Register
 189:Drivers/CMSIS/Include/core_cm3.h ****   - Core MPU Register
 190:Drivers/CMSIS/Include/core_cm3.h ****  ******************************************************************************/
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 6


 191:Drivers/CMSIS/Include/core_cm3.h **** /**
 192:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 193:Drivers/CMSIS/Include/core_cm3.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 194:Drivers/CMSIS/Include/core_cm3.h **** */
 195:Drivers/CMSIS/Include/core_cm3.h **** 
 196:Drivers/CMSIS/Include/core_cm3.h **** /**
 197:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup    CMSIS_core_register
 198:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 199:Drivers/CMSIS/Include/core_cm3.h ****   \brief      Core Register type definitions.
 200:Drivers/CMSIS/Include/core_cm3.h ****   @{
 201:Drivers/CMSIS/Include/core_cm3.h ****  */
 202:Drivers/CMSIS/Include/core_cm3.h **** 
 203:Drivers/CMSIS/Include/core_cm3.h **** /**
 204:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 205:Drivers/CMSIS/Include/core_cm3.h ****  */
 206:Drivers/CMSIS/Include/core_cm3.h **** typedef union
 207:Drivers/CMSIS/Include/core_cm3.h **** {
 208:Drivers/CMSIS/Include/core_cm3.h ****   struct
 209:Drivers/CMSIS/Include/core_cm3.h ****   {
 210:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved */
 211:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 212:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 213:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 214:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 215:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 216:Drivers/CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 217:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 218:Drivers/CMSIS/Include/core_cm3.h **** } APSR_Type;
 219:Drivers/CMSIS/Include/core_cm3.h **** 
 220:Drivers/CMSIS/Include/core_cm3.h **** /* APSR Register Definitions */
 221:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 222:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm3.h **** 
 224:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 225:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 226:Drivers/CMSIS/Include/core_cm3.h **** 
 227:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 228:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 229:Drivers/CMSIS/Include/core_cm3.h **** 
 230:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 231:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 232:Drivers/CMSIS/Include/core_cm3.h **** 
 233:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 234:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 235:Drivers/CMSIS/Include/core_cm3.h **** 
 236:Drivers/CMSIS/Include/core_cm3.h **** 
 237:Drivers/CMSIS/Include/core_cm3.h **** /**
 238:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 239:Drivers/CMSIS/Include/core_cm3.h ****  */
 240:Drivers/CMSIS/Include/core_cm3.h **** typedef union
 241:Drivers/CMSIS/Include/core_cm3.h **** {
 242:Drivers/CMSIS/Include/core_cm3.h ****   struct
 243:Drivers/CMSIS/Include/core_cm3.h ****   {
 244:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 245:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 246:Drivers/CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 247:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 7


 248:Drivers/CMSIS/Include/core_cm3.h **** } IPSR_Type;
 249:Drivers/CMSIS/Include/core_cm3.h **** 
 250:Drivers/CMSIS/Include/core_cm3.h **** /* IPSR Register Definitions */
 251:Drivers/CMSIS/Include/core_cm3.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 252:Drivers/CMSIS/Include/core_cm3.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 253:Drivers/CMSIS/Include/core_cm3.h **** 
 254:Drivers/CMSIS/Include/core_cm3.h **** 
 255:Drivers/CMSIS/Include/core_cm3.h **** /**
 256:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 257:Drivers/CMSIS/Include/core_cm3.h ****  */
 258:Drivers/CMSIS/Include/core_cm3.h **** typedef union
 259:Drivers/CMSIS/Include/core_cm3.h **** {
 260:Drivers/CMSIS/Include/core_cm3.h ****   struct
 261:Drivers/CMSIS/Include/core_cm3.h ****   {
 262:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 263:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:1;               /*!< bit:      9  Reserved */
 264:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t ICI_IT_1:6;                 /*!< bit: 10..15  ICI/IT part 1 */
 265:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t _reserved1:8;               /*!< bit: 16..23  Reserved */
 266:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit */
 267:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t ICI_IT_2:2;                 /*!< bit: 25..26  ICI/IT part 2 */
 268:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 269:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 270:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 271:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 272:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 273:Drivers/CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 274:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 275:Drivers/CMSIS/Include/core_cm3.h **** } xPSR_Type;
 276:Drivers/CMSIS/Include/core_cm3.h **** 
 277:Drivers/CMSIS/Include/core_cm3.h **** /* xPSR Register Definitions */
 278:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 279:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm3.h **** 
 281:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 282:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 283:Drivers/CMSIS/Include/core_cm3.h **** 
 284:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 285:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 286:Drivers/CMSIS/Include/core_cm3.h **** 
 287:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 288:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 289:Drivers/CMSIS/Include/core_cm3.h **** 
 290:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 291:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 292:Drivers/CMSIS/Include/core_cm3.h **** 
 293:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_ICI_IT_2_Pos                  25U                                            /*!< xPSR
 294:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_ICI_IT_2_Msk                  (3UL << xPSR_ICI_IT_2_Pos)                     /*!< xPSR
 295:Drivers/CMSIS/Include/core_cm3.h **** 
 296:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 297:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 298:Drivers/CMSIS/Include/core_cm3.h **** 
 299:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_ICI_IT_1_Pos                  10U                                            /*!< xPSR
 300:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_ICI_IT_1_Msk                  (0x3FUL << xPSR_ICI_IT_1_Pos)                  /*!< xPSR
 301:Drivers/CMSIS/Include/core_cm3.h **** 
 302:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 303:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 304:Drivers/CMSIS/Include/core_cm3.h **** 
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 8


 305:Drivers/CMSIS/Include/core_cm3.h **** 
 306:Drivers/CMSIS/Include/core_cm3.h **** /**
 307:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Union type to access the Control Registers (CONTROL).
 308:Drivers/CMSIS/Include/core_cm3.h ****  */
 309:Drivers/CMSIS/Include/core_cm3.h **** typedef union
 310:Drivers/CMSIS/Include/core_cm3.h **** {
 311:Drivers/CMSIS/Include/core_cm3.h ****   struct
 312:Drivers/CMSIS/Include/core_cm3.h ****   {
 313:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 314:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 315:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 316:Drivers/CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 317:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 318:Drivers/CMSIS/Include/core_cm3.h **** } CONTROL_Type;
 319:Drivers/CMSIS/Include/core_cm3.h **** 
 320:Drivers/CMSIS/Include/core_cm3.h **** /* CONTROL Register Definitions */
 321:Drivers/CMSIS/Include/core_cm3.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 322:Drivers/CMSIS/Include/core_cm3.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 323:Drivers/CMSIS/Include/core_cm3.h **** 
 324:Drivers/CMSIS/Include/core_cm3.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 325:Drivers/CMSIS/Include/core_cm3.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 326:Drivers/CMSIS/Include/core_cm3.h **** 
 327:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_CORE */
 328:Drivers/CMSIS/Include/core_cm3.h **** 
 329:Drivers/CMSIS/Include/core_cm3.h **** 
 330:Drivers/CMSIS/Include/core_cm3.h **** /**
 331:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup    CMSIS_core_register
 332:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 333:Drivers/CMSIS/Include/core_cm3.h ****   \brief      Type definitions for the NVIC Registers
 334:Drivers/CMSIS/Include/core_cm3.h ****   @{
 335:Drivers/CMSIS/Include/core_cm3.h ****  */
 336:Drivers/CMSIS/Include/core_cm3.h **** 
 337:Drivers/CMSIS/Include/core_cm3.h **** /**
 338:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 339:Drivers/CMSIS/Include/core_cm3.h ****  */
 340:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
 341:Drivers/CMSIS/Include/core_cm3.h **** {
 342:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 343:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[24U];
 344:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 345:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RSERVED1[24U];
 346:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 347:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED2[24U];
 348:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 349:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED3[24U];
 350:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 351:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED4[56U];
 352:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 353:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED5[644U];
 354:Drivers/CMSIS/Include/core_cm3.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 355:Drivers/CMSIS/Include/core_cm3.h **** }  NVIC_Type;
 356:Drivers/CMSIS/Include/core_cm3.h **** 
 357:Drivers/CMSIS/Include/core_cm3.h **** /* Software Triggered Interrupt Register Definitions */
 358:Drivers/CMSIS/Include/core_cm3.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 359:Drivers/CMSIS/Include/core_cm3.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 360:Drivers/CMSIS/Include/core_cm3.h **** 
 361:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_NVIC */
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 9


 362:Drivers/CMSIS/Include/core_cm3.h **** 
 363:Drivers/CMSIS/Include/core_cm3.h **** 
 364:Drivers/CMSIS/Include/core_cm3.h **** /**
 365:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 366:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 367:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the System Control Block Registers
 368:Drivers/CMSIS/Include/core_cm3.h ****   @{
 369:Drivers/CMSIS/Include/core_cm3.h ****  */
 370:Drivers/CMSIS/Include/core_cm3.h **** 
 371:Drivers/CMSIS/Include/core_cm3.h **** /**
 372:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the System Control Block (SCB).
 373:Drivers/CMSIS/Include/core_cm3.h ****  */
 374:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
 375:Drivers/CMSIS/Include/core_cm3.h **** {
 376:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 377:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 378:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 379:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 380:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 381:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 382:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 383:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 384:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 385:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 386:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 387:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 388:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 389:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 390:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 391:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 392:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 393:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 394:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 395:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[5U];
 396:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 397:Drivers/CMSIS/Include/core_cm3.h **** } SCB_Type;
 398:Drivers/CMSIS/Include/core_cm3.h **** 
 399:Drivers/CMSIS/Include/core_cm3.h **** /* SCB CPUID Register Definitions */
 400:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 402:Drivers/CMSIS/Include/core_cm3.h **** 
 403:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 405:Drivers/CMSIS/Include/core_cm3.h **** 
 406:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 408:Drivers/CMSIS/Include/core_cm3.h **** 
 409:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 411:Drivers/CMSIS/Include/core_cm3.h **** 
 412:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 414:Drivers/CMSIS/Include/core_cm3.h **** 
 415:Drivers/CMSIS/Include/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 416:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 418:Drivers/CMSIS/Include/core_cm3.h **** 
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 10


 419:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 421:Drivers/CMSIS/Include/core_cm3.h **** 
 422:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 424:Drivers/CMSIS/Include/core_cm3.h **** 
 425:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm3.h **** 
 428:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm3.h **** 
 431:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 432:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm3.h **** 
 434:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 435:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 436:Drivers/CMSIS/Include/core_cm3.h **** 
 437:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 438:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 439:Drivers/CMSIS/Include/core_cm3.h **** 
 440:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 441:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 442:Drivers/CMSIS/Include/core_cm3.h **** 
 443:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 444:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 445:Drivers/CMSIS/Include/core_cm3.h **** 
 446:Drivers/CMSIS/Include/core_cm3.h **** /* SCB Vector Table Offset Register Definitions */
 447:Drivers/CMSIS/Include/core_cm3.h **** #if defined (__CM3_REV) && (__CM3_REV < 0x0201U)                   /* core r2p1 */
 448:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29U                                            /*!< SCB 
 449:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 450:Drivers/CMSIS/Include/core_cm3.h **** 
 451:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 452:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 453:Drivers/CMSIS/Include/core_cm3.h **** #else
 454:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 455:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 456:Drivers/CMSIS/Include/core_cm3.h **** #endif
 457:Drivers/CMSIS/Include/core_cm3.h **** 
 458:Drivers/CMSIS/Include/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 459:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 460:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 461:Drivers/CMSIS/Include/core_cm3.h **** 
 462:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 463:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 464:Drivers/CMSIS/Include/core_cm3.h **** 
 465:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 466:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 467:Drivers/CMSIS/Include/core_cm3.h **** 
 468:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 469:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 470:Drivers/CMSIS/Include/core_cm3.h **** 
 471:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 472:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 473:Drivers/CMSIS/Include/core_cm3.h **** 
 474:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 475:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 11


 476:Drivers/CMSIS/Include/core_cm3.h **** 
 477:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 478:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 479:Drivers/CMSIS/Include/core_cm3.h **** 
 480:Drivers/CMSIS/Include/core_cm3.h **** /* SCB System Control Register Definitions */
 481:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 482:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 483:Drivers/CMSIS/Include/core_cm3.h **** 
 484:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 485:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 486:Drivers/CMSIS/Include/core_cm3.h **** 
 487:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 488:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 489:Drivers/CMSIS/Include/core_cm3.h **** 
 490:Drivers/CMSIS/Include/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 491:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 492:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 493:Drivers/CMSIS/Include/core_cm3.h **** 
 494:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 495:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 496:Drivers/CMSIS/Include/core_cm3.h **** 
 497:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 498:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 499:Drivers/CMSIS/Include/core_cm3.h **** 
 500:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 501:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 502:Drivers/CMSIS/Include/core_cm3.h **** 
 503:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 504:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 505:Drivers/CMSIS/Include/core_cm3.h **** 
 506:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 507:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 508:Drivers/CMSIS/Include/core_cm3.h **** 
 509:Drivers/CMSIS/Include/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 510:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 511:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 512:Drivers/CMSIS/Include/core_cm3.h **** 
 513:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 514:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 515:Drivers/CMSIS/Include/core_cm3.h **** 
 516:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 517:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 518:Drivers/CMSIS/Include/core_cm3.h **** 
 519:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 520:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 521:Drivers/CMSIS/Include/core_cm3.h **** 
 522:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 523:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 524:Drivers/CMSIS/Include/core_cm3.h **** 
 525:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 526:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 527:Drivers/CMSIS/Include/core_cm3.h **** 
 528:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 529:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 530:Drivers/CMSIS/Include/core_cm3.h **** 
 531:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 532:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 12


 533:Drivers/CMSIS/Include/core_cm3.h **** 
 534:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 535:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 536:Drivers/CMSIS/Include/core_cm3.h **** 
 537:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 538:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 539:Drivers/CMSIS/Include/core_cm3.h **** 
 540:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 541:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 542:Drivers/CMSIS/Include/core_cm3.h **** 
 543:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 544:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 545:Drivers/CMSIS/Include/core_cm3.h **** 
 546:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 547:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 548:Drivers/CMSIS/Include/core_cm3.h **** 
 549:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 550:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 551:Drivers/CMSIS/Include/core_cm3.h **** 
 552:Drivers/CMSIS/Include/core_cm3.h **** /* SCB Configurable Fault Status Register Definitions */
 553:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 554:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 555:Drivers/CMSIS/Include/core_cm3.h **** 
 556:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 557:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 558:Drivers/CMSIS/Include/core_cm3.h **** 
 559:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 560:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 561:Drivers/CMSIS/Include/core_cm3.h **** 
 562:Drivers/CMSIS/Include/core_cm3.h **** /* MemManage Fault Status Register (part of SCB Configurable Fault Status Register) */
 563:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MMARVALID_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 7U)               /*!< SCB 
 564:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MMARVALID_Msk             (1UL << SCB_CFSR_MMARVALID_Pos)                /*!< SCB 
 565:Drivers/CMSIS/Include/core_cm3.h **** 
 566:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MSTKERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 4U)               /*!< SCB 
 567:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MSTKERR_Msk               (1UL << SCB_CFSR_MSTKERR_Pos)                  /*!< SCB 
 568:Drivers/CMSIS/Include/core_cm3.h **** 
 569:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MUNSTKERR_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 3U)               /*!< SCB 
 570:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MUNSTKERR_Msk             (1UL << SCB_CFSR_MUNSTKERR_Pos)                /*!< SCB 
 571:Drivers/CMSIS/Include/core_cm3.h **** 
 572:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_DACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 1U)               /*!< SCB 
 573:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_DACCVIOL_Msk              (1UL << SCB_CFSR_DACCVIOL_Pos)                 /*!< SCB 
 574:Drivers/CMSIS/Include/core_cm3.h **** 
 575:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_IACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 0U)               /*!< SCB 
 576:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_IACCVIOL_Msk              (1UL /*<< SCB_CFSR_IACCVIOL_Pos*/)             /*!< SCB 
 577:Drivers/CMSIS/Include/core_cm3.h **** 
 578:Drivers/CMSIS/Include/core_cm3.h **** /* BusFault Status Register (part of SCB Configurable Fault Status Register) */
 579:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BFARVALID_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 7U)                  /*!< SCB 
 580:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BFARVALID_Msk            (1UL << SCB_CFSR_BFARVALID_Pos)                 /*!< SCB 
 581:Drivers/CMSIS/Include/core_cm3.h **** 
 582:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_STKERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 4U)                  /*!< SCB 
 583:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_STKERR_Msk               (1UL << SCB_CFSR_STKERR_Pos)                    /*!< SCB 
 584:Drivers/CMSIS/Include/core_cm3.h **** 
 585:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_UNSTKERR_Pos             (SCB_CFSR_BUSFAULTSR_Pos + 3U)                  /*!< SCB 
 586:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_UNSTKERR_Msk             (1UL << SCB_CFSR_UNSTKERR_Pos)                  /*!< SCB 
 587:Drivers/CMSIS/Include/core_cm3.h **** 
 588:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_IMPRECISERR_Pos          (SCB_CFSR_BUSFAULTSR_Pos + 2U)                  /*!< SCB 
 589:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_IMPRECISERR_Msk          (1UL << SCB_CFSR_IMPRECISERR_Pos)               /*!< SCB 
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 13


 590:Drivers/CMSIS/Include/core_cm3.h **** 
 591:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_PRECISERR_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 1U)                  /*!< SCB 
 592:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_PRECISERR_Msk            (1UL << SCB_CFSR_PRECISERR_Pos)                 /*!< SCB 
 593:Drivers/CMSIS/Include/core_cm3.h **** 
 594:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_IBUSERR_Pos              (SCB_CFSR_BUSFAULTSR_Pos + 0U)                  /*!< SCB 
 595:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_IBUSERR_Msk              (1UL << SCB_CFSR_IBUSERR_Pos)                   /*!< SCB 
 596:Drivers/CMSIS/Include/core_cm3.h **** 
 597:Drivers/CMSIS/Include/core_cm3.h **** /* UsageFault Status Register (part of SCB Configurable Fault Status Register) */
 598:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_DIVBYZERO_Pos            (SCB_CFSR_USGFAULTSR_Pos + 9U)                  /*!< SCB 
 599:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_DIVBYZERO_Msk            (1UL << SCB_CFSR_DIVBYZERO_Pos)                 /*!< SCB 
 600:Drivers/CMSIS/Include/core_cm3.h **** 
 601:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_UNALIGNED_Pos            (SCB_CFSR_USGFAULTSR_Pos + 8U)                  /*!< SCB 
 602:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_UNALIGNED_Msk            (1UL << SCB_CFSR_UNALIGNED_Pos)                 /*!< SCB 
 603:Drivers/CMSIS/Include/core_cm3.h **** 
 604:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_NOCP_Pos                 (SCB_CFSR_USGFAULTSR_Pos + 3U)                  /*!< SCB 
 605:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_NOCP_Msk                 (1UL << SCB_CFSR_NOCP_Pos)                      /*!< SCB 
 606:Drivers/CMSIS/Include/core_cm3.h **** 
 607:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_INVPC_Pos                (SCB_CFSR_USGFAULTSR_Pos + 2U)                  /*!< SCB 
 608:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_INVPC_Msk                (1UL << SCB_CFSR_INVPC_Pos)                     /*!< SCB 
 609:Drivers/CMSIS/Include/core_cm3.h **** 
 610:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_INVSTATE_Pos             (SCB_CFSR_USGFAULTSR_Pos + 1U)                  /*!< SCB 
 611:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_INVSTATE_Msk             (1UL << SCB_CFSR_INVSTATE_Pos)                  /*!< SCB 
 612:Drivers/CMSIS/Include/core_cm3.h **** 
 613:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_UNDEFINSTR_Pos           (SCB_CFSR_USGFAULTSR_Pos + 0U)                  /*!< SCB 
 614:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_UNDEFINSTR_Msk           (1UL << SCB_CFSR_UNDEFINSTR_Pos)                /*!< SCB 
 615:Drivers/CMSIS/Include/core_cm3.h **** 
 616:Drivers/CMSIS/Include/core_cm3.h **** /* SCB Hard Fault Status Register Definitions */
 617:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 618:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 619:Drivers/CMSIS/Include/core_cm3.h **** 
 620:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 621:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 622:Drivers/CMSIS/Include/core_cm3.h **** 
 623:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 624:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 625:Drivers/CMSIS/Include/core_cm3.h **** 
 626:Drivers/CMSIS/Include/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 627:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 628:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 629:Drivers/CMSIS/Include/core_cm3.h **** 
 630:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 631:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 632:Drivers/CMSIS/Include/core_cm3.h **** 
 633:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 634:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 635:Drivers/CMSIS/Include/core_cm3.h **** 
 636:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 637:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 638:Drivers/CMSIS/Include/core_cm3.h **** 
 639:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 640:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 641:Drivers/CMSIS/Include/core_cm3.h **** 
 642:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SCB */
 643:Drivers/CMSIS/Include/core_cm3.h **** 
 644:Drivers/CMSIS/Include/core_cm3.h **** 
 645:Drivers/CMSIS/Include/core_cm3.h **** /**
 646:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 14


 647:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 648:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 649:Drivers/CMSIS/Include/core_cm3.h ****   @{
 650:Drivers/CMSIS/Include/core_cm3.h ****  */
 651:Drivers/CMSIS/Include/core_cm3.h **** 
 652:Drivers/CMSIS/Include/core_cm3.h **** /**
 653:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 654:Drivers/CMSIS/Include/core_cm3.h ****  */
 655:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
 656:Drivers/CMSIS/Include/core_cm3.h **** {
 657:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[1U];
 658:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 659:Drivers/CMSIS/Include/core_cm3.h **** #if defined (__CM3_REV) && (__CM3_REV >= 0x200U)
 660:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 661:Drivers/CMSIS/Include/core_cm3.h **** #else
 662:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED1[1U];
 663:Drivers/CMSIS/Include/core_cm3.h **** #endif
 664:Drivers/CMSIS/Include/core_cm3.h **** } SCnSCB_Type;
 665:Drivers/CMSIS/Include/core_cm3.h **** 
 666:Drivers/CMSIS/Include/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 667:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 668:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 669:Drivers/CMSIS/Include/core_cm3.h **** 
 670:Drivers/CMSIS/Include/core_cm3.h **** /* Auxiliary Control Register Definitions */
 671:Drivers/CMSIS/Include/core_cm3.h **** 
 672:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 673:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 674:Drivers/CMSIS/Include/core_cm3.h **** 
 675:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 676:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 677:Drivers/CMSIS/Include/core_cm3.h **** 
 678:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 679:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 680:Drivers/CMSIS/Include/core_cm3.h **** 
 681:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SCnotSCB */
 682:Drivers/CMSIS/Include/core_cm3.h **** 
 683:Drivers/CMSIS/Include/core_cm3.h **** 
 684:Drivers/CMSIS/Include/core_cm3.h **** /**
 685:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 686:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 687:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the System Timer Registers.
 688:Drivers/CMSIS/Include/core_cm3.h ****   @{
 689:Drivers/CMSIS/Include/core_cm3.h ****  */
 690:Drivers/CMSIS/Include/core_cm3.h **** 
 691:Drivers/CMSIS/Include/core_cm3.h **** /**
 692:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the System Timer (SysTick).
 693:Drivers/CMSIS/Include/core_cm3.h ****  */
 694:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
 695:Drivers/CMSIS/Include/core_cm3.h **** {
 696:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 697:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 698:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 699:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 700:Drivers/CMSIS/Include/core_cm3.h **** } SysTick_Type;
 701:Drivers/CMSIS/Include/core_cm3.h **** 
 702:Drivers/CMSIS/Include/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 703:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 15


 704:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 705:Drivers/CMSIS/Include/core_cm3.h **** 
 706:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 707:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 708:Drivers/CMSIS/Include/core_cm3.h **** 
 709:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 710:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 711:Drivers/CMSIS/Include/core_cm3.h **** 
 712:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 713:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 714:Drivers/CMSIS/Include/core_cm3.h **** 
 715:Drivers/CMSIS/Include/core_cm3.h **** /* SysTick Reload Register Definitions */
 716:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 717:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 718:Drivers/CMSIS/Include/core_cm3.h **** 
 719:Drivers/CMSIS/Include/core_cm3.h **** /* SysTick Current Register Definitions */
 720:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 721:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 722:Drivers/CMSIS/Include/core_cm3.h **** 
 723:Drivers/CMSIS/Include/core_cm3.h **** /* SysTick Calibration Register Definitions */
 724:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 725:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 726:Drivers/CMSIS/Include/core_cm3.h **** 
 727:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 728:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 729:Drivers/CMSIS/Include/core_cm3.h **** 
 730:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 731:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 732:Drivers/CMSIS/Include/core_cm3.h **** 
 733:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 734:Drivers/CMSIS/Include/core_cm3.h **** 
 735:Drivers/CMSIS/Include/core_cm3.h **** 
 736:Drivers/CMSIS/Include/core_cm3.h **** /**
 737:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 738:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 739:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 740:Drivers/CMSIS/Include/core_cm3.h ****   @{
 741:Drivers/CMSIS/Include/core_cm3.h ****  */
 742:Drivers/CMSIS/Include/core_cm3.h **** 
 743:Drivers/CMSIS/Include/core_cm3.h **** /**
 744:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 745:Drivers/CMSIS/Include/core_cm3.h ****  */
 746:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
 747:Drivers/CMSIS/Include/core_cm3.h **** {
 748:Drivers/CMSIS/Include/core_cm3.h ****   __OM  union
 749:Drivers/CMSIS/Include/core_cm3.h ****   {
 750:Drivers/CMSIS/Include/core_cm3.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 751:Drivers/CMSIS/Include/core_cm3.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 752:Drivers/CMSIS/Include/core_cm3.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 753:Drivers/CMSIS/Include/core_cm3.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 754:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[864U];
 755:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 756:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED1[15U];
 757:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 758:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED2[15U];
 759:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 760:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED3[29U];
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 16


 761:Drivers/CMSIS/Include/core_cm3.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 762:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 763:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 764:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED4[43U];
 765:Drivers/CMSIS/Include/core_cm3.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 766:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 767:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED5[6U];
 768:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 769:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 770:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 771:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 772:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 773:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 774:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 775:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 776:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 777:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 778:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 779:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 780:Drivers/CMSIS/Include/core_cm3.h **** } ITM_Type;
 781:Drivers/CMSIS/Include/core_cm3.h **** 
 782:Drivers/CMSIS/Include/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 783:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 784:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFFFFFFFFUL /*<< ITM_TPR_PRIVMASK_Pos*/)     /*!< ITM 
 785:Drivers/CMSIS/Include/core_cm3.h **** 
 786:Drivers/CMSIS/Include/core_cm3.h **** /* ITM Trace Control Register Definitions */
 787:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 788:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 789:Drivers/CMSIS/Include/core_cm3.h **** 
 790:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 791:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 792:Drivers/CMSIS/Include/core_cm3.h **** 
 793:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 794:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 795:Drivers/CMSIS/Include/core_cm3.h **** 
 796:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 797:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 798:Drivers/CMSIS/Include/core_cm3.h **** 
 799:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 800:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 801:Drivers/CMSIS/Include/core_cm3.h **** 
 802:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 803:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 804:Drivers/CMSIS/Include/core_cm3.h **** 
 805:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 806:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 807:Drivers/CMSIS/Include/core_cm3.h **** 
 808:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 809:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 810:Drivers/CMSIS/Include/core_cm3.h **** 
 811:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 812:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 813:Drivers/CMSIS/Include/core_cm3.h **** 
 814:Drivers/CMSIS/Include/core_cm3.h **** /* ITM Integration Write Register Definitions */
 815:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 816:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 817:Drivers/CMSIS/Include/core_cm3.h **** 
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 17


 818:Drivers/CMSIS/Include/core_cm3.h **** /* ITM Integration Read Register Definitions */
 819:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 820:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 821:Drivers/CMSIS/Include/core_cm3.h **** 
 822:Drivers/CMSIS/Include/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 823:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 824:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 825:Drivers/CMSIS/Include/core_cm3.h **** 
 826:Drivers/CMSIS/Include/core_cm3.h **** /* ITM Lock Status Register Definitions */
 827:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 828:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 829:Drivers/CMSIS/Include/core_cm3.h **** 
 830:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 831:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 832:Drivers/CMSIS/Include/core_cm3.h **** 
 833:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 834:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 835:Drivers/CMSIS/Include/core_cm3.h **** 
 836:Drivers/CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 837:Drivers/CMSIS/Include/core_cm3.h **** 
 838:Drivers/CMSIS/Include/core_cm3.h **** 
 839:Drivers/CMSIS/Include/core_cm3.h **** /**
 840:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 841:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 842:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 843:Drivers/CMSIS/Include/core_cm3.h ****   @{
 844:Drivers/CMSIS/Include/core_cm3.h ****  */
 845:Drivers/CMSIS/Include/core_cm3.h **** 
 846:Drivers/CMSIS/Include/core_cm3.h **** /**
 847:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 848:Drivers/CMSIS/Include/core_cm3.h ****  */
 849:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
 850:Drivers/CMSIS/Include/core_cm3.h **** {
 851:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 852:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 853:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 854:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 855:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 856:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 857:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 858:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 859:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 860:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 861:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 862:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[1U];
 863:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 864:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 865:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 866:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED1[1U];
 867:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 868:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 869:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 870:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED2[1U];
 871:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 872:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 873:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 874:Drivers/CMSIS/Include/core_cm3.h **** } DWT_Type;
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 18


 875:Drivers/CMSIS/Include/core_cm3.h **** 
 876:Drivers/CMSIS/Include/core_cm3.h **** /* DWT Control Register Definitions */
 877:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 878:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 879:Drivers/CMSIS/Include/core_cm3.h **** 
 880:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 881:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 882:Drivers/CMSIS/Include/core_cm3.h **** 
 883:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 884:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 885:Drivers/CMSIS/Include/core_cm3.h **** 
 886:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 887:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 888:Drivers/CMSIS/Include/core_cm3.h **** 
 889:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 890:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 891:Drivers/CMSIS/Include/core_cm3.h **** 
 892:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 893:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 894:Drivers/CMSIS/Include/core_cm3.h **** 
 895:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 896:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 897:Drivers/CMSIS/Include/core_cm3.h **** 
 898:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 899:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 900:Drivers/CMSIS/Include/core_cm3.h **** 
 901:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 902:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 903:Drivers/CMSIS/Include/core_cm3.h **** 
 904:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 905:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 906:Drivers/CMSIS/Include/core_cm3.h **** 
 907:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 908:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 909:Drivers/CMSIS/Include/core_cm3.h **** 
 910:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 911:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 912:Drivers/CMSIS/Include/core_cm3.h **** 
 913:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 914:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 915:Drivers/CMSIS/Include/core_cm3.h **** 
 916:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 917:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 918:Drivers/CMSIS/Include/core_cm3.h **** 
 919:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 920:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 921:Drivers/CMSIS/Include/core_cm3.h **** 
 922:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 923:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 924:Drivers/CMSIS/Include/core_cm3.h **** 
 925:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 926:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 927:Drivers/CMSIS/Include/core_cm3.h **** 
 928:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 929:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 930:Drivers/CMSIS/Include/core_cm3.h **** 
 931:Drivers/CMSIS/Include/core_cm3.h **** /* DWT CPI Count Register Definitions */
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 19


 932:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 933:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 934:Drivers/CMSIS/Include/core_cm3.h **** 
 935:Drivers/CMSIS/Include/core_cm3.h **** /* DWT Exception Overhead Count Register Definitions */
 936:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
 937:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
 938:Drivers/CMSIS/Include/core_cm3.h **** 
 939:Drivers/CMSIS/Include/core_cm3.h **** /* DWT Sleep Count Register Definitions */
 940:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
 941:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
 942:Drivers/CMSIS/Include/core_cm3.h **** 
 943:Drivers/CMSIS/Include/core_cm3.h **** /* DWT LSU Count Register Definitions */
 944:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
 945:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
 946:Drivers/CMSIS/Include/core_cm3.h **** 
 947:Drivers/CMSIS/Include/core_cm3.h **** /* DWT Folded-instruction Count Register Definitions */
 948:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
 949:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
 950:Drivers/CMSIS/Include/core_cm3.h **** 
 951:Drivers/CMSIS/Include/core_cm3.h **** /* DWT Comparator Mask Register Definitions */
 952:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
 953:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
 954:Drivers/CMSIS/Include/core_cm3.h **** 
 955:Drivers/CMSIS/Include/core_cm3.h **** /* DWT Comparator Function Register Definitions */
 956:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
 957:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 958:Drivers/CMSIS/Include/core_cm3.h **** 
 959:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
 960:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 961:Drivers/CMSIS/Include/core_cm3.h **** 
 962:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
 963:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 964:Drivers/CMSIS/Include/core_cm3.h **** 
 965:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
 966:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 967:Drivers/CMSIS/Include/core_cm3.h **** 
 968:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
 969:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 970:Drivers/CMSIS/Include/core_cm3.h **** 
 971:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
 972:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 973:Drivers/CMSIS/Include/core_cm3.h **** 
 974:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
 975:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 976:Drivers/CMSIS/Include/core_cm3.h **** 
 977:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
 978:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 979:Drivers/CMSIS/Include/core_cm3.h **** 
 980:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
 981:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
 982:Drivers/CMSIS/Include/core_cm3.h **** 
 983:Drivers/CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_DWT */
 984:Drivers/CMSIS/Include/core_cm3.h **** 
 985:Drivers/CMSIS/Include/core_cm3.h **** 
 986:Drivers/CMSIS/Include/core_cm3.h **** /**
 987:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 988:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 20


 989:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
 990:Drivers/CMSIS/Include/core_cm3.h ****   @{
 991:Drivers/CMSIS/Include/core_cm3.h ****  */
 992:Drivers/CMSIS/Include/core_cm3.h **** 
 993:Drivers/CMSIS/Include/core_cm3.h **** /**
 994:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
 995:Drivers/CMSIS/Include/core_cm3.h ****  */
 996:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
 997:Drivers/CMSIS/Include/core_cm3.h **** {
 998:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
 999:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1000:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[2U];
1001:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1002:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED1[55U];
1003:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1004:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED2[131U];
1005:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1006:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1007:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1008:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED3[759U];
1009:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER Register */
1010:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1011:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1012:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED4[1U];
1013:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1014:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1015:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1016:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED5[39U];
1017:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1018:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1019:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED7[8U];
1020:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1021:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1022:Drivers/CMSIS/Include/core_cm3.h **** } TPI_Type;
1023:Drivers/CMSIS/Include/core_cm3.h **** 
1024:Drivers/CMSIS/Include/core_cm3.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1025:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1026:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1027:Drivers/CMSIS/Include/core_cm3.h **** 
1028:Drivers/CMSIS/Include/core_cm3.h **** /* TPI Selected Pin Protocol Register Definitions */
1029:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1030:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1031:Drivers/CMSIS/Include/core_cm3.h **** 
1032:Drivers/CMSIS/Include/core_cm3.h **** /* TPI Formatter and Flush Status Register Definitions */
1033:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1034:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1035:Drivers/CMSIS/Include/core_cm3.h **** 
1036:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1037:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1038:Drivers/CMSIS/Include/core_cm3.h **** 
1039:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1040:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1041:Drivers/CMSIS/Include/core_cm3.h **** 
1042:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1043:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1044:Drivers/CMSIS/Include/core_cm3.h **** 
1045:Drivers/CMSIS/Include/core_cm3.h **** /* TPI Formatter and Flush Control Register Definitions */
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 21


1046:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1047:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1048:Drivers/CMSIS/Include/core_cm3.h **** 
1049:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1050:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1051:Drivers/CMSIS/Include/core_cm3.h **** 
1052:Drivers/CMSIS/Include/core_cm3.h **** /* TPI TRIGGER Register Definitions */
1053:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1054:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1055:Drivers/CMSIS/Include/core_cm3.h **** 
1056:Drivers/CMSIS/Include/core_cm3.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1057:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1058:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1059:Drivers/CMSIS/Include/core_cm3.h **** 
1060:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1061:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1062:Drivers/CMSIS/Include/core_cm3.h **** 
1063:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1064:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1065:Drivers/CMSIS/Include/core_cm3.h **** 
1066:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1067:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1068:Drivers/CMSIS/Include/core_cm3.h **** 
1069:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1070:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1071:Drivers/CMSIS/Include/core_cm3.h **** 
1072:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1073:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1074:Drivers/CMSIS/Include/core_cm3.h **** 
1075:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1076:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1077:Drivers/CMSIS/Include/core_cm3.h **** 
1078:Drivers/CMSIS/Include/core_cm3.h **** /* TPI ITATBCTR2 Register Definitions */
1079:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY2_Pos          0U                                         /*!< TPI ITA
1080:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY2_Msk         (0x1UL /*<< TPI_ITATBCTR2_ATREADY2_Pos*/)   /*!< TPI ITA
1081:Drivers/CMSIS/Include/core_cm3.h **** 
1082:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY1_Pos          0U                                         /*!< TPI ITA
1083:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY1_Msk         (0x1UL /*<< TPI_ITATBCTR2_ATREADY1_Pos*/)   /*!< TPI ITA
1084:Drivers/CMSIS/Include/core_cm3.h **** 
1085:Drivers/CMSIS/Include/core_cm3.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1086:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1087:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1088:Drivers/CMSIS/Include/core_cm3.h **** 
1089:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1090:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1091:Drivers/CMSIS/Include/core_cm3.h **** 
1092:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1093:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1094:Drivers/CMSIS/Include/core_cm3.h **** 
1095:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1096:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1097:Drivers/CMSIS/Include/core_cm3.h **** 
1098:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1099:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1100:Drivers/CMSIS/Include/core_cm3.h **** 
1101:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1102:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 22


1103:Drivers/CMSIS/Include/core_cm3.h **** 
1104:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1105:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1106:Drivers/CMSIS/Include/core_cm3.h **** 
1107:Drivers/CMSIS/Include/core_cm3.h **** /* TPI ITATBCTR0 Register Definitions */
1108:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY2_Pos          0U                                         /*!< TPI ITA
1109:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY2_Msk         (0x1UL /*<< TPI_ITATBCTR0_ATREADY2_Pos*/)   /*!< TPI ITA
1110:Drivers/CMSIS/Include/core_cm3.h **** 
1111:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY1_Pos          0U                                         /*!< TPI ITA
1112:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY1_Msk         (0x1UL /*<< TPI_ITATBCTR0_ATREADY1_Pos*/)   /*!< TPI ITA
1113:Drivers/CMSIS/Include/core_cm3.h **** 
1114:Drivers/CMSIS/Include/core_cm3.h **** /* TPI Integration Mode Control Register Definitions */
1115:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1116:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITCTRL_Mode_Msk                (0x3UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1117:Drivers/CMSIS/Include/core_cm3.h **** 
1118:Drivers/CMSIS/Include/core_cm3.h **** /* TPI DEVID Register Definitions */
1119:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1120:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1121:Drivers/CMSIS/Include/core_cm3.h **** 
1122:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1123:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1124:Drivers/CMSIS/Include/core_cm3.h **** 
1125:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1126:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1127:Drivers/CMSIS/Include/core_cm3.h **** 
1128:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1129:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1130:Drivers/CMSIS/Include/core_cm3.h **** 
1131:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1132:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1133:Drivers/CMSIS/Include/core_cm3.h **** 
1134:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1135:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1136:Drivers/CMSIS/Include/core_cm3.h **** 
1137:Drivers/CMSIS/Include/core_cm3.h **** /* TPI DEVTYPE Register Definitions */
1138:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_SubType_Pos             4U                                         /*!< TPI DEV
1139:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1140:Drivers/CMSIS/Include/core_cm3.h **** 
1141:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Pos           0U                                         /*!< TPI DEV
1142:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1143:Drivers/CMSIS/Include/core_cm3.h **** 
1144:Drivers/CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_TPI */
1145:Drivers/CMSIS/Include/core_cm3.h **** 
1146:Drivers/CMSIS/Include/core_cm3.h **** 
1147:Drivers/CMSIS/Include/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1148:Drivers/CMSIS/Include/core_cm3.h **** /**
1149:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
1150:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1151:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1152:Drivers/CMSIS/Include/core_cm3.h ****   @{
1153:Drivers/CMSIS/Include/core_cm3.h ****  */
1154:Drivers/CMSIS/Include/core_cm3.h **** 
1155:Drivers/CMSIS/Include/core_cm3.h **** /**
1156:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1157:Drivers/CMSIS/Include/core_cm3.h ****  */
1158:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
1159:Drivers/CMSIS/Include/core_cm3.h **** {
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 23


1160:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1161:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1162:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1163:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1164:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1165:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1166:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1167:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1168:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1169:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1170:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1171:Drivers/CMSIS/Include/core_cm3.h **** } MPU_Type;
1172:Drivers/CMSIS/Include/core_cm3.h **** 
1173:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_RALIASES                  4U
1174:Drivers/CMSIS/Include/core_cm3.h **** 
1175:Drivers/CMSIS/Include/core_cm3.h **** /* MPU Type Register Definitions */
1176:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1177:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1178:Drivers/CMSIS/Include/core_cm3.h **** 
1179:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1180:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1181:Drivers/CMSIS/Include/core_cm3.h **** 
1182:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1183:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1184:Drivers/CMSIS/Include/core_cm3.h **** 
1185:Drivers/CMSIS/Include/core_cm3.h **** /* MPU Control Register Definitions */
1186:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1187:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1188:Drivers/CMSIS/Include/core_cm3.h **** 
1189:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1190:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1191:Drivers/CMSIS/Include/core_cm3.h **** 
1192:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1193:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1194:Drivers/CMSIS/Include/core_cm3.h **** 
1195:Drivers/CMSIS/Include/core_cm3.h **** /* MPU Region Number Register Definitions */
1196:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1197:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1198:Drivers/CMSIS/Include/core_cm3.h **** 
1199:Drivers/CMSIS/Include/core_cm3.h **** /* MPU Region Base Address Register Definitions */
1200:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1201:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1202:Drivers/CMSIS/Include/core_cm3.h **** 
1203:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1204:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1205:Drivers/CMSIS/Include/core_cm3.h **** 
1206:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1207:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1208:Drivers/CMSIS/Include/core_cm3.h **** 
1209:Drivers/CMSIS/Include/core_cm3.h **** /* MPU Region Attribute and Size Register Definitions */
1210:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1211:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1212:Drivers/CMSIS/Include/core_cm3.h **** 
1213:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1214:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1215:Drivers/CMSIS/Include/core_cm3.h **** 
1216:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 24


1217:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1218:Drivers/CMSIS/Include/core_cm3.h **** 
1219:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1220:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1221:Drivers/CMSIS/Include/core_cm3.h **** 
1222:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1223:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1224:Drivers/CMSIS/Include/core_cm3.h **** 
1225:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1226:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1227:Drivers/CMSIS/Include/core_cm3.h **** 
1228:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1229:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1230:Drivers/CMSIS/Include/core_cm3.h **** 
1231:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1232:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1233:Drivers/CMSIS/Include/core_cm3.h **** 
1234:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1235:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1236:Drivers/CMSIS/Include/core_cm3.h **** 
1237:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1238:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1239:Drivers/CMSIS/Include/core_cm3.h **** 
1240:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_MPU */
1241:Drivers/CMSIS/Include/core_cm3.h **** #endif
1242:Drivers/CMSIS/Include/core_cm3.h **** 
1243:Drivers/CMSIS/Include/core_cm3.h **** 
1244:Drivers/CMSIS/Include/core_cm3.h **** /**
1245:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
1246:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1247:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the Core Debug Registers
1248:Drivers/CMSIS/Include/core_cm3.h ****   @{
1249:Drivers/CMSIS/Include/core_cm3.h ****  */
1250:Drivers/CMSIS/Include/core_cm3.h **** 
1251:Drivers/CMSIS/Include/core_cm3.h **** /**
1252:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1253:Drivers/CMSIS/Include/core_cm3.h ****  */
1254:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
1255:Drivers/CMSIS/Include/core_cm3.h **** {
1256:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1257:Drivers/CMSIS/Include/core_cm3.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1258:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1259:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1260:Drivers/CMSIS/Include/core_cm3.h **** } CoreDebug_Type;
1261:Drivers/CMSIS/Include/core_cm3.h **** 
1262:Drivers/CMSIS/Include/core_cm3.h **** /* Debug Halting Control and Status Register Definitions */
1263:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1264:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1265:Drivers/CMSIS/Include/core_cm3.h **** 
1266:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1267:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1268:Drivers/CMSIS/Include/core_cm3.h **** 
1269:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1270:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1271:Drivers/CMSIS/Include/core_cm3.h **** 
1272:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1273:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 25


1274:Drivers/CMSIS/Include/core_cm3.h **** 
1275:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1276:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1277:Drivers/CMSIS/Include/core_cm3.h **** 
1278:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1279:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1280:Drivers/CMSIS/Include/core_cm3.h **** 
1281:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1282:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1283:Drivers/CMSIS/Include/core_cm3.h **** 
1284:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1285:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1286:Drivers/CMSIS/Include/core_cm3.h **** 
1287:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1288:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1289:Drivers/CMSIS/Include/core_cm3.h **** 
1290:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1291:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1292:Drivers/CMSIS/Include/core_cm3.h **** 
1293:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1294:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1295:Drivers/CMSIS/Include/core_cm3.h **** 
1296:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1297:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1298:Drivers/CMSIS/Include/core_cm3.h **** 
1299:Drivers/CMSIS/Include/core_cm3.h **** /* Debug Core Register Selector Register Definitions */
1300:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1301:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1302:Drivers/CMSIS/Include/core_cm3.h **** 
1303:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1304:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1305:Drivers/CMSIS/Include/core_cm3.h **** 
1306:Drivers/CMSIS/Include/core_cm3.h **** /* Debug Exception and Monitor Control Register Definitions */
1307:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1308:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1309:Drivers/CMSIS/Include/core_cm3.h **** 
1310:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1311:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1312:Drivers/CMSIS/Include/core_cm3.h **** 
1313:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1314:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1315:Drivers/CMSIS/Include/core_cm3.h **** 
1316:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1317:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1318:Drivers/CMSIS/Include/core_cm3.h **** 
1319:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1320:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1321:Drivers/CMSIS/Include/core_cm3.h **** 
1322:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1323:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1324:Drivers/CMSIS/Include/core_cm3.h **** 
1325:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1326:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1327:Drivers/CMSIS/Include/core_cm3.h **** 
1328:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1329:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1330:Drivers/CMSIS/Include/core_cm3.h **** 
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 26


1331:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1332:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1333:Drivers/CMSIS/Include/core_cm3.h **** 
1334:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1335:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1336:Drivers/CMSIS/Include/core_cm3.h **** 
1337:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1338:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1339:Drivers/CMSIS/Include/core_cm3.h **** 
1340:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1341:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1342:Drivers/CMSIS/Include/core_cm3.h **** 
1343:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1344:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1345:Drivers/CMSIS/Include/core_cm3.h **** 
1346:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
1347:Drivers/CMSIS/Include/core_cm3.h **** 
1348:Drivers/CMSIS/Include/core_cm3.h **** 
1349:Drivers/CMSIS/Include/core_cm3.h **** /**
1350:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup    CMSIS_core_register
1351:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1352:Drivers/CMSIS/Include/core_cm3.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1353:Drivers/CMSIS/Include/core_cm3.h ****   @{
1354:Drivers/CMSIS/Include/core_cm3.h ****  */
1355:Drivers/CMSIS/Include/core_cm3.h **** 
1356:Drivers/CMSIS/Include/core_cm3.h **** /**
1357:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1358:Drivers/CMSIS/Include/core_cm3.h ****   \param[in] field  Name of the register bit field.
1359:Drivers/CMSIS/Include/core_cm3.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
1360:Drivers/CMSIS/Include/core_cm3.h ****   \return           Masked and shifted value.
1361:Drivers/CMSIS/Include/core_cm3.h **** */
1362:Drivers/CMSIS/Include/core_cm3.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
1363:Drivers/CMSIS/Include/core_cm3.h **** 
1364:Drivers/CMSIS/Include/core_cm3.h **** /**
1365:Drivers/CMSIS/Include/core_cm3.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1366:Drivers/CMSIS/Include/core_cm3.h ****   \param[in] field  Name of the register bit field.
1367:Drivers/CMSIS/Include/core_cm3.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
1368:Drivers/CMSIS/Include/core_cm3.h ****   \return           Masked and shifted bit field value.
1369:Drivers/CMSIS/Include/core_cm3.h **** */
1370:Drivers/CMSIS/Include/core_cm3.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
1371:Drivers/CMSIS/Include/core_cm3.h **** 
1372:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_core_bitfield */
1373:Drivers/CMSIS/Include/core_cm3.h **** 
1374:Drivers/CMSIS/Include/core_cm3.h **** 
1375:Drivers/CMSIS/Include/core_cm3.h **** /**
1376:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup    CMSIS_core_register
1377:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup   CMSIS_core_base     Core Definitions
1378:Drivers/CMSIS/Include/core_cm3.h ****   \brief      Definitions for base addresses, unions, and structures.
1379:Drivers/CMSIS/Include/core_cm3.h ****   @{
1380:Drivers/CMSIS/Include/core_cm3.h ****  */
1381:Drivers/CMSIS/Include/core_cm3.h **** 
1382:Drivers/CMSIS/Include/core_cm3.h **** /* Memory mapping of Core Hardware */
1383:Drivers/CMSIS/Include/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1384:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1385:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1386:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1387:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 27


1388:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1389:Drivers/CMSIS/Include/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1390:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1391:Drivers/CMSIS/Include/core_cm3.h **** 
1392:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1393:Drivers/CMSIS/Include/core_cm3.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1394:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1395:Drivers/CMSIS/Include/core_cm3.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1396:Drivers/CMSIS/Include/core_cm3.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1397:Drivers/CMSIS/Include/core_cm3.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1398:Drivers/CMSIS/Include/core_cm3.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1399:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1400:Drivers/CMSIS/Include/core_cm3.h **** 
1401:Drivers/CMSIS/Include/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1402:Drivers/CMSIS/Include/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1403:Drivers/CMSIS/Include/core_cm3.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1404:Drivers/CMSIS/Include/core_cm3.h **** #endif
1405:Drivers/CMSIS/Include/core_cm3.h **** 
1406:Drivers/CMSIS/Include/core_cm3.h **** /*@} */
1407:Drivers/CMSIS/Include/core_cm3.h **** 
1408:Drivers/CMSIS/Include/core_cm3.h **** 
1409:Drivers/CMSIS/Include/core_cm3.h **** 
1410:Drivers/CMSIS/Include/core_cm3.h **** /*******************************************************************************
1411:Drivers/CMSIS/Include/core_cm3.h ****  *                Hardware Abstraction Layer
1412:Drivers/CMSIS/Include/core_cm3.h ****   Core Function Interface contains:
1413:Drivers/CMSIS/Include/core_cm3.h ****   - Core NVIC Functions
1414:Drivers/CMSIS/Include/core_cm3.h ****   - Core SysTick Functions
1415:Drivers/CMSIS/Include/core_cm3.h ****   - Core Debug Functions
1416:Drivers/CMSIS/Include/core_cm3.h ****   - Core Register Access Functions
1417:Drivers/CMSIS/Include/core_cm3.h ****  ******************************************************************************/
1418:Drivers/CMSIS/Include/core_cm3.h **** /**
1419:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1420:Drivers/CMSIS/Include/core_cm3.h **** */
1421:Drivers/CMSIS/Include/core_cm3.h **** 
1422:Drivers/CMSIS/Include/core_cm3.h **** 
1423:Drivers/CMSIS/Include/core_cm3.h **** 
1424:Drivers/CMSIS/Include/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1425:Drivers/CMSIS/Include/core_cm3.h **** /**
1426:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_Core_FunctionInterface
1427:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1428:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1429:Drivers/CMSIS/Include/core_cm3.h ****   @{
1430:Drivers/CMSIS/Include/core_cm3.h ****  */
1431:Drivers/CMSIS/Include/core_cm3.h **** 
1432:Drivers/CMSIS/Include/core_cm3.h **** #ifdef CMSIS_NVIC_VIRTUAL
1433:Drivers/CMSIS/Include/core_cm3.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
1434:Drivers/CMSIS/Include/core_cm3.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
1435:Drivers/CMSIS/Include/core_cm3.h ****   #endif
1436:Drivers/CMSIS/Include/core_cm3.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
1437:Drivers/CMSIS/Include/core_cm3.h **** #else
1438:Drivers/CMSIS/Include/core_cm3.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
1439:Drivers/CMSIS/Include/core_cm3.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
1440:Drivers/CMSIS/Include/core_cm3.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
1441:Drivers/CMSIS/Include/core_cm3.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
1442:Drivers/CMSIS/Include/core_cm3.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
1443:Drivers/CMSIS/Include/core_cm3.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
1444:Drivers/CMSIS/Include/core_cm3.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 28


1445:Drivers/CMSIS/Include/core_cm3.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
1446:Drivers/CMSIS/Include/core_cm3.h ****   #define NVIC_GetActive              __NVIC_GetActive
1447:Drivers/CMSIS/Include/core_cm3.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
1448:Drivers/CMSIS/Include/core_cm3.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
1449:Drivers/CMSIS/Include/core_cm3.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
1450:Drivers/CMSIS/Include/core_cm3.h **** #endif /* CMSIS_NVIC_VIRTUAL */
1451:Drivers/CMSIS/Include/core_cm3.h **** 
1452:Drivers/CMSIS/Include/core_cm3.h **** #ifdef CMSIS_VECTAB_VIRTUAL
1453:Drivers/CMSIS/Include/core_cm3.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1454:Drivers/CMSIS/Include/core_cm3.h ****    #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
1455:Drivers/CMSIS/Include/core_cm3.h ****   #endif
1456:Drivers/CMSIS/Include/core_cm3.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1457:Drivers/CMSIS/Include/core_cm3.h **** #else
1458:Drivers/CMSIS/Include/core_cm3.h ****   #define NVIC_SetVector              __NVIC_SetVector
1459:Drivers/CMSIS/Include/core_cm3.h ****   #define NVIC_GetVector              __NVIC_GetVector
1460:Drivers/CMSIS/Include/core_cm3.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
1461:Drivers/CMSIS/Include/core_cm3.h **** 
1462:Drivers/CMSIS/Include/core_cm3.h **** #define NVIC_USER_IRQ_OFFSET          16
1463:Drivers/CMSIS/Include/core_cm3.h **** 
1464:Drivers/CMSIS/Include/core_cm3.h **** 
1465:Drivers/CMSIS/Include/core_cm3.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
1466:Drivers/CMSIS/Include/core_cm3.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
1467:Drivers/CMSIS/Include/core_cm3.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
1468:Drivers/CMSIS/Include/core_cm3.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
1469:Drivers/CMSIS/Include/core_cm3.h **** 
1470:Drivers/CMSIS/Include/core_cm3.h **** 
1471:Drivers/CMSIS/Include/core_cm3.h **** /**
1472:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Set Priority Grouping
1473:Drivers/CMSIS/Include/core_cm3.h ****   \details Sets the priority grouping field using the required unlock sequence.
1474:Drivers/CMSIS/Include/core_cm3.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1475:Drivers/CMSIS/Include/core_cm3.h ****            Only values from 0..7 are used.
1476:Drivers/CMSIS/Include/core_cm3.h ****            In case of a conflict between priority grouping and available
1477:Drivers/CMSIS/Include/core_cm3.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1478:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]      PriorityGroup  Priority grouping field.
1479:Drivers/CMSIS/Include/core_cm3.h ****  */
1480:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1481:Drivers/CMSIS/Include/core_cm3.h **** {
1482:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t reg_value;
1483:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1484:Drivers/CMSIS/Include/core_cm3.h **** 
1485:Drivers/CMSIS/Include/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1486:Drivers/CMSIS/Include/core_cm3.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1487:Drivers/CMSIS/Include/core_cm3.h ****   reg_value  =  (reg_value                                   |
1488:Drivers/CMSIS/Include/core_cm3.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1489:Drivers/CMSIS/Include/core_cm3.h ****                 (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key a
1490:Drivers/CMSIS/Include/core_cm3.h ****   SCB->AIRCR =  reg_value;
1491:Drivers/CMSIS/Include/core_cm3.h **** }
1492:Drivers/CMSIS/Include/core_cm3.h **** 
1493:Drivers/CMSIS/Include/core_cm3.h **** 
1494:Drivers/CMSIS/Include/core_cm3.h **** /**
1495:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Get Priority Grouping
1496:Drivers/CMSIS/Include/core_cm3.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1497:Drivers/CMSIS/Include/core_cm3.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1498:Drivers/CMSIS/Include/core_cm3.h ****  */
1499:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
1500:Drivers/CMSIS/Include/core_cm3.h **** {
1501:Drivers/CMSIS/Include/core_cm3.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 29


1502:Drivers/CMSIS/Include/core_cm3.h **** }
1503:Drivers/CMSIS/Include/core_cm3.h **** 
1504:Drivers/CMSIS/Include/core_cm3.h **** 
1505:Drivers/CMSIS/Include/core_cm3.h **** /**
1506:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Enable Interrupt
1507:Drivers/CMSIS/Include/core_cm3.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
1508:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1509:Drivers/CMSIS/Include/core_cm3.h ****   \note    IRQn must not be negative.
1510:Drivers/CMSIS/Include/core_cm3.h ****  */
1511:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
1512:Drivers/CMSIS/Include/core_cm3.h **** {
1513:Drivers/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1514:Drivers/CMSIS/Include/core_cm3.h ****   {
1515:Drivers/CMSIS/Include/core_cm3.h ****     NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1516:Drivers/CMSIS/Include/core_cm3.h ****   }
1517:Drivers/CMSIS/Include/core_cm3.h **** }
1518:Drivers/CMSIS/Include/core_cm3.h **** 
1519:Drivers/CMSIS/Include/core_cm3.h **** 
1520:Drivers/CMSIS/Include/core_cm3.h **** /**
1521:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Get Interrupt Enable status
1522:Drivers/CMSIS/Include/core_cm3.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
1523:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1524:Drivers/CMSIS/Include/core_cm3.h ****   \return             0  Interrupt is not enabled.
1525:Drivers/CMSIS/Include/core_cm3.h ****   \return             1  Interrupt is enabled.
1526:Drivers/CMSIS/Include/core_cm3.h ****   \note    IRQn must not be negative.
1527:Drivers/CMSIS/Include/core_cm3.h ****  */
1528:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
1529:Drivers/CMSIS/Include/core_cm3.h **** {
1530:Drivers/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1531:Drivers/CMSIS/Include/core_cm3.h ****   {
1532:Drivers/CMSIS/Include/core_cm3.h ****     return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1533:Drivers/CMSIS/Include/core_cm3.h ****   }
1534:Drivers/CMSIS/Include/core_cm3.h ****   else
1535:Drivers/CMSIS/Include/core_cm3.h ****   {
1536:Drivers/CMSIS/Include/core_cm3.h ****     return(0U);
1537:Drivers/CMSIS/Include/core_cm3.h ****   }
1538:Drivers/CMSIS/Include/core_cm3.h **** }
1539:Drivers/CMSIS/Include/core_cm3.h **** 
1540:Drivers/CMSIS/Include/core_cm3.h **** 
1541:Drivers/CMSIS/Include/core_cm3.h **** /**
1542:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Disable Interrupt
1543:Drivers/CMSIS/Include/core_cm3.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
1544:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1545:Drivers/CMSIS/Include/core_cm3.h ****   \note    IRQn must not be negative.
1546:Drivers/CMSIS/Include/core_cm3.h ****  */
1547:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
1548:Drivers/CMSIS/Include/core_cm3.h **** {
1549:Drivers/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1550:Drivers/CMSIS/Include/core_cm3.h ****   {
1551:Drivers/CMSIS/Include/core_cm3.h ****     NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1552:Drivers/CMSIS/Include/core_cm3.h ****     __DSB();
1553:Drivers/CMSIS/Include/core_cm3.h ****     __ISB();
1554:Drivers/CMSIS/Include/core_cm3.h ****   }
1555:Drivers/CMSIS/Include/core_cm3.h **** }
1556:Drivers/CMSIS/Include/core_cm3.h **** 
1557:Drivers/CMSIS/Include/core_cm3.h **** 
1558:Drivers/CMSIS/Include/core_cm3.h **** /**
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 30


1559:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Get Pending Interrupt
1560:Drivers/CMSIS/Include/core_cm3.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
1561:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1562:Drivers/CMSIS/Include/core_cm3.h ****   \return             0  Interrupt status is not pending.
1563:Drivers/CMSIS/Include/core_cm3.h ****   \return             1  Interrupt status is pending.
1564:Drivers/CMSIS/Include/core_cm3.h ****   \note    IRQn must not be negative.
1565:Drivers/CMSIS/Include/core_cm3.h ****  */
1566:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
1567:Drivers/CMSIS/Include/core_cm3.h **** {
1568:Drivers/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1569:Drivers/CMSIS/Include/core_cm3.h ****   {
1570:Drivers/CMSIS/Include/core_cm3.h ****     return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1571:Drivers/CMSIS/Include/core_cm3.h ****   }
1572:Drivers/CMSIS/Include/core_cm3.h ****   else
1573:Drivers/CMSIS/Include/core_cm3.h ****   {
1574:Drivers/CMSIS/Include/core_cm3.h ****     return(0U);
1575:Drivers/CMSIS/Include/core_cm3.h ****   }
1576:Drivers/CMSIS/Include/core_cm3.h **** }
1577:Drivers/CMSIS/Include/core_cm3.h **** 
1578:Drivers/CMSIS/Include/core_cm3.h **** 
1579:Drivers/CMSIS/Include/core_cm3.h **** /**
1580:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Set Pending Interrupt
1581:Drivers/CMSIS/Include/core_cm3.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
1582:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1583:Drivers/CMSIS/Include/core_cm3.h ****   \note    IRQn must not be negative.
1584:Drivers/CMSIS/Include/core_cm3.h ****  */
1585:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
1586:Drivers/CMSIS/Include/core_cm3.h **** {
1587:Drivers/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1588:Drivers/CMSIS/Include/core_cm3.h ****   {
1589:Drivers/CMSIS/Include/core_cm3.h ****     NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1590:Drivers/CMSIS/Include/core_cm3.h ****   }
1591:Drivers/CMSIS/Include/core_cm3.h **** }
1592:Drivers/CMSIS/Include/core_cm3.h **** 
1593:Drivers/CMSIS/Include/core_cm3.h **** 
1594:Drivers/CMSIS/Include/core_cm3.h **** /**
1595:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Clear Pending Interrupt
1596:Drivers/CMSIS/Include/core_cm3.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
1597:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1598:Drivers/CMSIS/Include/core_cm3.h ****   \note    IRQn must not be negative.
1599:Drivers/CMSIS/Include/core_cm3.h ****  */
1600:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
  41              		.loc 2 1600 22 view .LVU2
  42              	.LBB17:
1601:Drivers/CMSIS/Include/core_cm3.h **** {
1602:Drivers/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
  43              		.loc 2 1602 3 view .LVU3
1603:Drivers/CMSIS/Include/core_cm3.h ****   {
1604:Drivers/CMSIS/Include/core_cm3.h ****     NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  44              		.loc 2 1604 5 view .LVU4
  45              		.loc 2 1604 43 is_stmt 0 view .LVU5
  46 0002 0A4B     		ldr	r3, .L5
  47 0004 2022     		movs	r2, #32
  48 0006 C3F88421 		str	r2, [r3, #388]
  49              	.LVL1:
  50              		.loc 2 1604 43 view .LVU6
  51              	.LBE17:
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 31


  52              	.LBE16:
  57:user/src/uart_print_user.c **** 
  58:user/src/uart_print_user.c **** 	// Init RX ring buffer
  59:user/src/uart_print_user.c ****   if (ring_buffer_init(&uartRxBuff, UART_RX_BUFF_SIZE) != RB_OK)
  53              		.loc 1 59 3 is_stmt 1 view .LVU7
  54              		.loc 1 59 7 is_stmt 0 view .LVU8
  55 000a 8021     		movs	r1, #128
  56 000c 0848     		ldr	r0, .L5+4
  57 000e FFF7FEFF 		bl	ring_buffer_init
  58              	.LVL2:
  59              		.loc 1 59 6 view .LVU9
  60 0012 38B9     		cbnz	r0, .L4
  61              	.L2:
  60:user/src/uart_print_user.c **** 	{
  61:user/src/uart_print_user.c ****     Error_Handler();
  62:user/src/uart_print_user.c **** 	}
  63:user/src/uart_print_user.c **** 
  64:user/src/uart_print_user.c **** 	// init UART driver
  65:user/src/uart_print_user.c ****   MX_USART1_UART_Init();
  62              		.loc 1 65 3 is_stmt 1 view .LVU10
  63 0014 FFF7FEFF 		bl	MX_USART1_UART_Init
  64              	.LVL3:
  66:user/src/uart_print_user.c ****   LL_USART_EnableIT_RXNE(UART_DRIVER);
  65              		.loc 1 66 3 view .LVU11
  66              	.LBB18:
  67              	.LBI18:
  68              		.file 3 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h"
   1:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
   2:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   ******************************************************************************
   3:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @file    stm32l1xx_ll_usart.h
   4:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @author  MCD Application Team
   5:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief   Header file of USART LL module.
   6:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   ******************************************************************************
   7:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @attention
   8:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *
   9:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
  10:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * All rights reserved.</center></h2>
  11:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *
  12:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * the "License"; You may not use this file except in compliance with the
  14:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * License. You may obtain a copy of the License at:
  15:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *
  17:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   ******************************************************************************
  18:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
  19:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  20:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  21:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #ifndef __STM32L1xx_LL_USART_H
  22:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define __STM32L1xx_LL_USART_H
  23:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  24:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #ifdef __cplusplus
  25:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** extern "C" {
  26:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #endif
  27:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  28:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /* Includes ------------------------------------------------------------------*/
  29:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #include "stm32l1xx.h"
  30:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 32


  31:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @addtogroup STM32L1xx_LL_Driver
  32:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
  33:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
  34:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  35:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #if defined (USART1) || defined (USART2) || defined (USART3) || defined (UART4) || defined (UART5)
  36:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  37:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL USART
  38:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
  39:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
  40:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  41:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /* Private types -------------------------------------------------------------*/
  42:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /* Private variables ---------------------------------------------------------*/
  43:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  44:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /* Private constants ---------------------------------------------------------*/
  45:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_Private_Constants USART Private Constants
  46:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
  47:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
  48:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  49:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /* Defines used for the bit position in the register and perform offsets*/
  50:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define USART_POSITION_GTPR_GT                  USART_GTPR_GT_Pos
  51:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
  52:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
  53:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
  54:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  55:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /* Private macros ------------------------------------------------------------*/
  56:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  57:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_Private_Macros USART Private Macros
  58:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
  59:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
  60:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
  61:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
  62:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
  63:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
  64:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  65:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /* Exported types ------------------------------------------------------------*/
  66:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  67:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_ES_INIT USART Exported Init structures
  68:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
  69:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
  70:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  71:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
  72:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief LL USART Init Structure definition
  73:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
  74:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** typedef struct
  75:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
  76:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   uint32_t BaudRate;                  /*!< This field defines expected Usart communication baud rat
  77:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  78:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
  79:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  80:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   uint32_t DataWidth;                 /*!< Specifies the number of data bits transmitted or receive
  81:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DATAWI
  82:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  83:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
  84:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  85:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   uint32_t StopBits;                  /*!< Specifies the number of stop bits transmitted.
  86:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_STOPBI
  87:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 33


  88:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
  89:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  90:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   uint32_t Parity;                    /*!< Specifies the parity mode.
  91:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PARITY
  92:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  93:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
  94:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  95:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   uint32_t TransferDirection;         /*!< Specifies whether the Receive and/or Transmit mode is en
  96:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DIRECT
  97:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  98:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
  99:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 100:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   uint32_t HardwareFlowControl;       /*!< Specifies whether the hardware flow control mode is enab
 101:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_HWCONT
 102:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 103:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 104:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 105:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   uint32_t OverSampling;              /*!< Specifies whether USART oversampling mode is 16 or 8.
 106:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_OVERSA
 107:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 108:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 109:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 110:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** } LL_USART_InitTypeDef;
 111:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 112:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 113:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief LL USART Clock Init Structure definition
 114:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 115:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** typedef struct
 116:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 117:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   uint32_t ClockOutput;               /*!< Specifies whether the USART clock is enabled or disabled
 118:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_CLOCK.
 119:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 120:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 121:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            @ref LL_USART_EnableSCLKOutput() or @ref LL_USART_Disabl
 122:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            For more details, refer to description of this function.
 123:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 124:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   uint32_t ClockPolarity;             /*!< Specifies the steady state of the serial clock.
 125:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_POLARI
 126:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 127:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 128:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            For more details, refer to description of this function.
 129:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 130:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   uint32_t ClockPhase;                /*!< Specifies the clock transition on which the bit capture 
 131:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PHASE.
 132:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 133:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 134:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            For more details, refer to description of this function.
 135:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 136:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   uint32_t LastBitClockPulse;         /*!< Specifies whether the clock pulse corresponding to the l
 137:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            data bit (MSB) has to be output on the SCLK pin in synch
 138:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_LASTCL
 139:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 140:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 141:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            For more details, refer to description of this function.
 142:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 143:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** } LL_USART_ClockInitTypeDef;
 144:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 34


 145:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 146:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 147:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 148:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #endif /* USE_FULL_LL_DRIVER */
 149:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 150:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /* Exported constants --------------------------------------------------------*/
 151:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Constants USART Exported Constants
 152:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 153:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 154:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 155:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EC_GET_FLAG Get Flags Defines
 156:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief    Flags defines which can be used with LL_USART_ReadReg function
 157:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 158:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 159:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_SR_PE                          USART_SR_PE                   /*!< Parity error fla
 160:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_SR_FE                          USART_SR_FE                   /*!< Framing error fl
 161:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_SR_NE                          USART_SR_NE                   /*!< Noise detected f
 162:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_SR_ORE                         USART_SR_ORE                  /*!< Overrun error fl
 163:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_SR_IDLE                        USART_SR_IDLE                 /*!< Idle line detect
 164:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_SR_RXNE                        USART_SR_RXNE                 /*!< Read data regist
 165:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_SR_TC                          USART_SR_TC                   /*!< Transmission com
 166:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_SR_TXE                         USART_SR_TXE                  /*!< Transmit data re
 167:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_SR_LBD                         USART_SR_LBD                  /*!< LIN break detect
 168:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_SR_CTS                         USART_SR_CTS                  /*!< CTS flag */
 169:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 170:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 171:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 172:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 173:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EC_IT IT Defines
 174:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief    IT defines which can be used with LL_USART_ReadReg and  LL_USART_WriteReg functions
 175:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 176:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 177:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_CR1_IDLEIE                     USART_CR1_IDLEIE              /*!< IDLE interrupt e
 178:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_CR1_RXNEIE                     USART_CR1_RXNEIE              /*!< Read data regist
 179:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_CR1_TCIE                       USART_CR1_TCIE                /*!< Transmission com
 180:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_CR1_TXEIE                      USART_CR1_TXEIE               /*!< Transmit data re
 181:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_CR1_PEIE                       USART_CR1_PEIE                /*!< Parity error */
 182:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_CR2_LBDIE                      USART_CR2_LBDIE               /*!< LIN break detect
 183:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_CR3_EIE                        USART_CR3_EIE                 /*!< Error interrupt 
 184:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_CR3_CTSIE                      USART_CR3_CTSIE               /*!< CTS interrupt en
 185:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 186:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 187:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 188:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 189:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EC_DIRECTION Communication Direction
 190:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 191:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 192:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_DIRECTION_NONE                 0x00000000U                        /*!< Transmitter
 193:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_DIRECTION_RX                   USART_CR1_RE                       /*!< Transmitter
 194:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_DIRECTION_TX                   USART_CR1_TE                       /*!< Transmitter
 195:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_DIRECTION_TX_RX                (USART_CR1_TE |USART_CR1_RE)       /*!< Transmitter
 196:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 197:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 198:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 199:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 200:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EC_PARITY Parity Control
 201:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 35


 202:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 203:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_PARITY_NONE                    0x00000000U                          /*!< Parity co
 204:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_PARITY_EVEN                    USART_CR1_PCE                        /*!< Parity co
 205:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_PARITY_ODD                     (USART_CR1_PCE | USART_CR1_PS)       /*!< Parity co
 206:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 207:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 208:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 209:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 210:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EC_WAKEUP Wakeup
 211:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 212:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 213:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_WAKEUP_IDLELINE                0x00000000U           /*!<  USART wake up from Mute
 214:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_WAKEUP_ADDRESSMARK             USART_CR1_WAKE        /*!<  USART wake up from Mute
 215:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 216:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 217:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 218:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 219:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EC_DATAWIDTH Datawidth
 220:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 221:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 222:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_DATAWIDTH_8B                   0x00000000U             /*!< 8 bits word length : S
 223:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_DATAWIDTH_9B                   USART_CR1_M             /*!< 9 bits word length : S
 224:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 225:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 226:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 227:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 228:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EC_OVERSAMPLING Oversampling
 229:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 230:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 231:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_OVERSAMPLING_16                0x00000000U            /*!< Oversampling by 16 */
 232:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_OVERSAMPLING_8                 USART_CR1_OVER8        /*!< Oversampling by 8 */
 233:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 234:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 235:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 236:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 237:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
 238:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EC_CLOCK Clock Signal
 239:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 240:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 241:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 242:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_CLOCK_DISABLE                  0x00000000U            /*!< Clock signal not provid
 243:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_CLOCK_ENABLE                   USART_CR2_CLKEN        /*!< Clock signal provided *
 244:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 245:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 246:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 247:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
 248:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 249:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EC_LASTCLKPULSE Last Clock Pulse
 250:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 251:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 252:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_NO_OUTPUT         0x00000000U           /*!< The clock pulse of the l
 253:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_OUTPUT            USART_CR2_LBCL        /*!< The clock pulse of the l
 254:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 255:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 256:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 257:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 258:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EC_PHASE Clock Phase
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 36


 259:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 260:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 261:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_PHASE_1EDGE                    0x00000000U           /*!< The first clock transiti
 262:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_PHASE_2EDGE                    USART_CR2_CPHA        /*!< The second clock transit
 263:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 264:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 265:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 266:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 267:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EC_POLARITY Clock Polarity
 268:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 269:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 270:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_POLARITY_LOW                   0x00000000U           /*!< Steady low value on SCLK
 271:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_POLARITY_HIGH                  USART_CR2_CPOL        /*!< Steady high value on SCL
 272:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 273:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 274:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 275:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 276:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EC_STOPBITS Stop Bits
 277:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 278:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 279:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_STOPBITS_0_5                   USART_CR2_STOP_0                           /*!< 0.5
 280:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_STOPBITS_1                     0x00000000U                                /*!< 1 s
 281:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_STOPBITS_1_5                   (USART_CR2_STOP_0 | USART_CR2_STOP_1)      /*!< 1.5
 282:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_STOPBITS_2                     USART_CR2_STOP_1                           /*!< 2 s
 283:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 284:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 285:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 286:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 287:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EC_HWCONTROL Hardware Control
 288:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 289:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 290:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_HWCONTROL_NONE                 0x00000000U                          /*!< CTS and R
 291:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS                  USART_CR3_RTSE                       /*!< RTS outpu
 292:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_HWCONTROL_CTS                  USART_CR3_CTSE                       /*!< CTS mode 
 293:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS_CTS              (USART_CR3_RTSE | USART_CR3_CTSE)    /*!< CTS and R
 294:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 295:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 296:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 297:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 298:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EC_IRDA_POWER IrDA Power
 299:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 300:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 301:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_IRDA_POWER_NORMAL              0x00000000U           /*!< IrDA normal power mode *
 302:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_IRDA_POWER_LOW                 USART_CR3_IRLP        /*!< IrDA low power mode */
 303:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 304:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 305:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 306:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 307:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EC_LINBREAK_DETECT LIN Break Detection Length
 308:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 309:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 310:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_10B            0x00000000U           /*!< 10-bit break detection m
 311:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_11B            USART_CR2_LBDL        /*!< 11-bit break detection m
 312:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 313:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 314:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 315:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 37


 316:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 317:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 318:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 319:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 320:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /* Exported macro ------------------------------------------------------------*/
 321:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Macros USART Exported Macros
 322:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 323:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 324:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 325:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EM_WRITE_READ Common Write and read registers Macros
 326:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 327:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 328:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 329:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 330:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Write a value in USART register
 331:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 332:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  __REG__ Register to be written
 333:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  __VALUE__ Value to be written in the register
 334:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 335:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 336:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VAL
 337:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 338:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 339:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Read a value in USART register
 340:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 341:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  __REG__ Register to be read
 342:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Register value
 343:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 344:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 345:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 346:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 347:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 348:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 349:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EM_Exported_Macros_Helper Exported_Macros_Helper
 350:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 351:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 352:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 353:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 354:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 355:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         expected Baud Rate in 8 bits sampling mode (32 bits value of USARTDIV is returned)
 356:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 357:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 358:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_8 case
 359:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 360:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING8_100(__PERIPHCLK__, __BAUDRATE__)      (((__PERIPHCLK__)*25)/(2*(__
 361:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define __LL_USART_DIVMANT_SAMPLING8(__PERIPHCLK__, __BAUDRATE__)      (__LL_USART_DIV_SAMPLING8_10
 362:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define __LL_USART_DIVFRAQ_SAMPLING8(__PERIPHCLK__, __BAUDRATE__)      (((__LL_USART_DIV_SAMPLING8_
 363:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /* UART BRR = mantissa + overflow + fraction
 364:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****             = (UART DIVMANT << 4) + ((UART DIVFRAQ & 0xF8) << 1) + (UART DIVFRAQ & 0x07) */
 365:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING8(__PERIPHCLK__, __BAUDRATE__)             (((__LL_USART_DIVMANT_SAM
 366:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                                                            ((__LL_USART_DIVFRAQ_SAM
 367:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                                                            (__LL_USART_DIVFRAQ_SAMP
 368:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 369:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 370:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 371:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         expected Baud Rate in 16 bits sampling mode (32 bits value of USARTDIV is returned)
 372:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 38


 373:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 374:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_16 case
 375:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 376:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING16_100(__PERIPHCLK__, __BAUDRATE__)     (((__PERIPHCLK__)*25)/(4*(__
 377:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define __LL_USART_DIVMANT_SAMPLING16(__PERIPHCLK__, __BAUDRATE__)     (__LL_USART_DIV_SAMPLING16_1
 378:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define __LL_USART_DIVFRAQ_SAMPLING16(__PERIPHCLK__, __BAUDRATE__)     (((__LL_USART_DIV_SAMPLING16
 379:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /* USART BRR = mantissa + overflow + fraction
 380:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****             = (USART DIVMANT << 4) + (USART DIVFRAQ & 0xF0) + (USART DIVFRAQ & 0x0F) */
 381:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING16(__PERIPHCLK__, __BAUDRATE__)            (((__LL_USART_DIVMANT_SAM
 382:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                                                            (__LL_USART_DIVFRAQ_SAMP
 383:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                                                            (__LL_USART_DIVFRAQ_SAMP
 384:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 385:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 386:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 387:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 388:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 389:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 390:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 391:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 392:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 393:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /* Exported functions --------------------------------------------------------*/
 394:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 395:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Functions USART Exported Functions
 396:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 397:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 398:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 399:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration Configuration functions
 400:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 401:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 402:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 403:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 404:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  USART Enable
 405:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Enable
 406:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 407:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 408:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 409:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
 410:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 411:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_UE);
 412:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 413:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 414:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 415:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  USART Disable (all USART prescalers and outputs are disabled)
 416:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   When USART is disabled, USART prescalers and outputs are stopped immediately,
 417:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         and current operations are discarded. The configuration of the USART is kept, but all t
 418:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         flags, in the USARTx_SR are set to their default values.
 419:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Disable
 420:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 421:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 422:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 423:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
 424:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 425:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 426:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 427:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 428:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 429:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Indicate if USART is enabled
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 39


 430:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_IsEnabled
 431:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 432:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 433:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 434:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
 435:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 436:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 437:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 438:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 439:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 440:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Receiver Enable (Receiver is enabled and begins searching for a start bit)
 441:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_EnableDirectionRx
 442:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 443:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 444:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 445:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionRx(USART_TypeDef *USARTx)
 446:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 447:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_RE);
 448:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 449:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 450:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 451:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Receiver Disable
 452:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_DisableDirectionRx
 453:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 454:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 455:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 456:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionRx(USART_TypeDef *USARTx)
 457:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 458:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_RE);
 459:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 460:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 461:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 462:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Transmitter Enable
 463:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_EnableDirectionTx
 464:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 465:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 466:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 467:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionTx(USART_TypeDef *USARTx)
 468:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 469:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_TE);
 470:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 471:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 472:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 473:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Transmitter Disable
 474:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_DisableDirectionTx
 475:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 476:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 477:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 478:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionTx(USART_TypeDef *USARTx)
 479:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 480:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_TE);
 481:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 482:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 483:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 484:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Configure simultaneously enabled/disabled states
 485:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         of Transmitter and Receiver
 486:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_SetTransferDirection\n
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 40


 487:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR1          TE            LL_USART_SetTransferDirection
 488:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 489:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  TransferDirection This parameter can be one of the following values:
 490:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 491:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 492:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 493:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 494:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 495:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 496:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirectio
 497:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 498:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 499:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 500:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 501:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 502:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Return enabled/disabled states of Transmitter and Receiver
 503:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_GetTransferDirection\n
 504:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR1          TE            LL_USART_GetTransferDirection
 505:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 506:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 507:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 508:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 509:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 510:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 511:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 512:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTransferDirection(USART_TypeDef *USARTx)
 513:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 514:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_RE | USART_CR1_TE));
 515:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 516:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 517:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 518:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Configure Parity (enabled/disabled and parity mode if enabled).
 519:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   This function selects if hardware parity control (generation and detection) is enabled 
 520:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         When the parity control is enabled (Odd or Even), computed parity bit is inserted at th
 521:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         (9th or 8th bit depending on data width) and parity is checked on the received data.
 522:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_SetParity\n
 523:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR1          PCE           LL_USART_SetParity
 524:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 525:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
 526:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 527:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 528:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 529:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 530:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 531:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetParity(USART_TypeDef *USARTx, uint32_t Parity)
 532:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 533:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 534:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 535:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 536:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 537:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Return Parity configuration (enabled/disabled and parity mode if enabled)
 538:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_GetParity\n
 539:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR1          PCE           LL_USART_GetParity
 540:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 541:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 542:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 543:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 41


 544:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 545:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 546:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
 547:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 548:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 549:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 550:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 551:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 552:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Set Receiver Wake Up method from Mute mode.
 553:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_SetWakeUpMethod
 554:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 555:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  Method This parameter can be one of the following values:
 556:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
 557:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
 558:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 559:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 560:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetWakeUpMethod(USART_TypeDef *USARTx, uint32_t Method)
 561:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 562:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_WAKE, Method);
 563:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 564:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 565:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 566:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Return Receiver Wake Up method from Mute mode
 567:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_GetWakeUpMethod
 568:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 569:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 570:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
 571:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
 572:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 573:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetWakeUpMethod(USART_TypeDef *USARTx)
 574:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 575:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_WAKE));
 576:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 577:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 578:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 579:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Set Word length (i.e. nb of data bits, excluding start and stop bits)
 580:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          M             LL_USART_SetDataWidth
 581:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 582:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
 583:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 584:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 585:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 586:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 587:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDataWidth(USART_TypeDef *USARTx, uint32_t DataWidth)
 588:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 589:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 590:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 591:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 592:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 593:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Return Word length (i.e. nb of data bits, excluding start and stop bits)
 594:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          M             LL_USART_GetDataWidth
 595:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 596:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 597:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 598:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 599:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 600:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDataWidth(USART_TypeDef *USARTx)
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 42


 601:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 602:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 603:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 604:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 605:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 606:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Set Oversampling to 8-bit or 16-bit mode
 607:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_SetOverSampling
 608:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 609:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
 610:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
 611:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
 612:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 613:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 614:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
 615:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 616:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 617:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 618:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 619:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 620:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Return Oversampling mode
 621:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_GetOverSampling
 622:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 623:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 624:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
 625:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
 626:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 627:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetOverSampling(USART_TypeDef *USARTx)
 628:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 629:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_OVER8));
 630:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 631:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 632:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 633:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Configure if Clock pulse of the last data bit is output to the SCLK pin or not
 634:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 635:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 636:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_SetLastClkPulseOutput
 637:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 638:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  LastBitClockPulse This parameter can be one of the following values:
 639:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 640:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 641:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 642:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 643:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLastClkPulseOutput(USART_TypeDef *USARTx, uint32_t LastBitClockPul
 644:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 645:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBCL, LastBitClockPulse);
 646:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 647:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 648:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 649:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Retrieve Clock pulse of the last data bit output configuration
 650:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         (Last bit Clock pulse output to the SCLK pin or not)
 651:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 652:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 653:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_GetLastClkPulseOutput
 654:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 655:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 656:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 657:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 43


 658:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 659:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLastClkPulseOutput(USART_TypeDef *USARTx)
 660:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 661:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBCL));
 662:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 663:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 664:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 665:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Select the phase of the clock output on the SCLK pin in synchronous mode
 666:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 667:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 668:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_SetClockPhase
 669:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 670:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  ClockPhase This parameter can be one of the following values:
 671:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 672:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 673:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 674:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 675:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPhase(USART_TypeDef *USARTx, uint32_t ClockPhase)
 676:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 677:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA, ClockPhase);
 678:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 679:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 680:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 681:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Return phase of the clock output on the SCLK pin in synchronous mode
 682:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 683:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 684:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_GetClockPhase
 685:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 686:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 687:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 688:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 689:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 690:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPhase(USART_TypeDef *USARTx)
 691:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 692:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPHA));
 693:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 694:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 695:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 696:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Select the polarity of the clock output on the SCLK pin in synchronous mode
 697:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 698:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 699:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_SetClockPolarity
 700:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 701:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  ClockPolarity This parameter can be one of the following values:
 702:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 703:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 704:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 705:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 706:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPolarity(USART_TypeDef *USARTx, uint32_t ClockPolarity)
 707:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 708:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPOL, ClockPolarity);
 709:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 710:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 711:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 712:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Return polarity of the clock output on the SCLK pin in synchronous mode
 713:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 714:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 44


 715:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_GetClockPolarity
 716:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 717:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 718:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 719:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 720:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 721:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPolarity(USART_TypeDef *USARTx)
 722:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 723:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPOL));
 724:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 725:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 726:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 727:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Configure Clock signal format (Phase Polarity and choice about output of last bit clock
 728:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 729:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 730:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
 731:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clock Phase configuration using @ref LL_USART_SetClockPhase() function
 732:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clock Polarity configuration using @ref LL_USART_SetClockPolarity() function
 733:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Output of Last bit Clock pulse configuration using @ref LL_USART_SetLastClkPulseOutpu
 734:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_ConfigClock\n
 735:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR2          CPOL          LL_USART_ConfigClock\n
 736:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR2          LBCL          LL_USART_ConfigClock
 737:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 738:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  Phase This parameter can be one of the following values:
 739:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 740:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 741:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  Polarity This parameter can be one of the following values:
 742:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 743:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 744:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  LBCPOutput This parameter can be one of the following values:
 745:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 746:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 747:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 748:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 749:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigClock(USART_TypeDef *USARTx, uint32_t Phase, uint32_t Polarity,
 750:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 751:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_LBCL, Phase | Polarity | LBCP
 752:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 753:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 754:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 755:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable Clock output on SCLK pin
 756:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 757:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 758:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_EnableSCLKOutput
 759:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 760:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 761:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 762:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSCLKOutput(USART_TypeDef *USARTx)
 763:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 764:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
 765:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 766:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 767:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 768:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable Clock output on SCLK pin
 769:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 770:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 771:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_DisableSCLKOutput
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 45


 772:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 773:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 774:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 775:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSCLKOutput(USART_TypeDef *USARTx)
 776:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 777:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
 778:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 779:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 780:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 781:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Indicate if Clock output on SCLK pin is enabled
 782:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 783:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 784:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_IsEnabledSCLKOutput
 785:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 786:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 787:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 788:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSCLKOutput(USART_TypeDef *USARTx)
 789:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 790:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_CLKEN) == (USART_CR2_CLKEN));
 791:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 792:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 793:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 794:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Set the length of the stop bits
 795:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_SetStopBitsLength
 796:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 797:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
 798:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
 799:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
 800:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
 801:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
 802:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 803:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 804:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
 805:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 806:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 807:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 808:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 809:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 810:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Retrieve the length of the stop bits
 811:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_GetStopBitsLength
 812:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 813:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 814:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
 815:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
 816:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
 817:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
 818:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 819:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
 820:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 821:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 822:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 823:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 824:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 825:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Configure Character frame format (Datawidth, Parity control, Stop Bits)
 826:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
 827:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Data Width configuration using @ref LL_USART_SetDataWidth() function
 828:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Parity Control and mode configuration using @ref LL_USART_SetParity() function
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 46


 829:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Stop bits configuration using @ref LL_USART_SetStopBitsLength() function
 830:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_ConfigCharacter\n
 831:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR1          PCE           LL_USART_ConfigCharacter\n
 832:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR1          M             LL_USART_ConfigCharacter\n
 833:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigCharacter
 834:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 835:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
 836:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 837:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 838:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
 839:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 840:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 841:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 842:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
 843:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
 844:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
 845:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
 846:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
 847:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 848:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 849:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t P
 850:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                               uint32_t StopBits)
 851:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 852:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 853:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 854:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 855:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 856:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 857:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Set Address of the USART node.
 858:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   This is used in multiprocessor communication during Mute mode or Stop mode,
 859:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         for wake up with address mark detection.
 860:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_SetNodeAddress
 861:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 862:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  NodeAddress 4 bit Address of the USART node.
 863:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 864:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 865:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetNodeAddress(USART_TypeDef *USARTx, uint32_t NodeAddress)
 866:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 867:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_ADD, (NodeAddress & USART_CR2_ADD));
 868:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 869:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 870:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 871:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Return 4 bit Address of the USART node as set in ADD field of CR2.
 872:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   only 4bits (b3-b0) of returned value are relevant (b31-b4 are not relevant)
 873:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_GetNodeAddress
 874:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 875:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Address of the USART node (Value between Min_Data=0 and Max_Data=255)
 876:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 877:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetNodeAddress(USART_TypeDef *USARTx)
 878:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 879:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ADD));
 880:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 881:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 882:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 883:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable RTS HW Flow Control
 884:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 885:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 47


 886:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_EnableRTSHWFlowCtrl
 887:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 888:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 889:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 890:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableRTSHWFlowCtrl(USART_TypeDef *USARTx)
 891:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 892:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_RTSE);
 893:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 894:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 895:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 896:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable RTS HW Flow Control
 897:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 898:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 899:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_DisableRTSHWFlowCtrl
 900:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 901:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 902:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 903:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableRTSHWFlowCtrl(USART_TypeDef *USARTx)
 904:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 905:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_RTSE);
 906:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 907:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 908:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 909:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable CTS HW Flow Control
 910:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 911:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 912:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_EnableCTSHWFlowCtrl
 913:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 914:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 915:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 916:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableCTSHWFlowCtrl(USART_TypeDef *USARTx)
 917:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 918:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_CTSE);
 919:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 920:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 921:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 922:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable CTS HW Flow Control
 923:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 924:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 925:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_DisableCTSHWFlowCtrl
 926:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 927:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 928:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 929:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableCTSHWFlowCtrl(USART_TypeDef *USARTx)
 930:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 931:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_CTSE);
 932:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 933:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 934:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 935:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Configure HW Flow Control mode (both CTS and RTS)
 936:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 937:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 938:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_SetHWFlowCtrl\n
 939:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          CTSE          LL_USART_SetHWFlowCtrl
 940:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 941:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  HardwareFlowControl This parameter can be one of the following values:
 942:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 48


 943:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
 944:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
 945:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
 946:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 947:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 948:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
 949:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 950:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 951:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 952:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 953:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 954:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Return HW Flow Control configuration (both CTS and RTS)
 955:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 956:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 957:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_GetHWFlowCtrl\n
 958:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          CTSE          LL_USART_GetHWFlowCtrl
 959:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 960:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 961:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
 962:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
 963:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
 964:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
 965:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 966:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
 967:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 968:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 969:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 970:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 971:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 972:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable One bit sampling method
 973:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_EnableOneBitSamp
 974:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 975:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 976:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 977:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableOneBitSamp(USART_TypeDef *USARTx)
 978:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 979:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_ONEBIT);
 980:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 981:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 982:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 983:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable One bit sampling method
 984:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_DisableOneBitSamp
 985:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 986:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 987:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 988:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableOneBitSamp(USART_TypeDef *USARTx)
 989:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 990:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_ONEBIT);
 991:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 992:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 993:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 994:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Indicate if One bit sampling method is enabled
 995:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_IsEnabledOneBitSamp
 996:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 997:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 998:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 999:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledOneBitSamp(USART_TypeDef *USARTx)
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 49


1000:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1001:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_ONEBIT) == (USART_CR3_ONEBIT));
1002:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1003:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1004:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1005:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Configure USART BRR register for achieving expected Baud Rate value.
1006:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Compute and set USARTDIV value in BRR Register (full BRR content)
1007:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         according to used Peripheral Clock, Oversampling mode, and expected Baud Rate values
1008:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Peripheral clock and Baud rate values provided as function parameters should be valid
1009:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         (Baud rate value != 0)
1010:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_SetBaudRate
1011:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1012:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1013:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1014:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1015:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1016:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  BaudRate Baud Rate
1017:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1018:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1019:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverS
1020:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                           uint32_t BaudRate)
1021:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1022:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   if (OverSampling == LL_USART_OVERSAMPLING_8)
1023:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   {
1024:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****     USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
1025:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   }
1026:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   else
1027:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   {
1028:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****     USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
1029:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   }
1030:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1031:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1032:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1033:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Return current Baud Rate value, according to USARTDIV present in BRR register
1034:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         (full BRR content), and to used Peripheral Clock and Oversampling mode values
1035:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   In case of non-initialized or invalid value stored in BRR register, value 0 will be ret
1036:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_GetBaudRate
1037:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1038:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1039:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1040:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1041:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1042:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Baud Rate
1043:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1044:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t O
1045:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1046:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   register uint32_t usartdiv = 0x0U;
1047:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   register uint32_t brrresult = 0x0U;
1048:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1049:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   usartdiv = USARTx->BRR;
1050:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1051:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   if (OverSampling == LL_USART_OVERSAMPLING_8)
1052:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   {
1053:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****     if ((usartdiv & 0xFFF7U) != 0U)
1054:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****     {
1055:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****       usartdiv = (uint16_t)((usartdiv & 0xFFF0U) | ((usartdiv & 0x0007U) << 1U)) ;
1056:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****       brrresult = (PeriphClk * 2U) / usartdiv;
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 50


1057:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****     }
1058:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   }
1059:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   else
1060:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   {
1061:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****     if ((usartdiv & 0xFFFFU) != 0U)
1062:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****     {
1063:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****       brrresult = PeriphClk / usartdiv;
1064:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****     }
1065:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   }
1066:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (brrresult);
1067:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1068:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1069:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1070:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
1071:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1072:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1073:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_IRDA Configuration functions related to Irda feature
1074:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
1075:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1076:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1077:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1078:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable IrDA mode
1079:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1080:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1081:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_EnableIrda
1082:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1083:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1084:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1085:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIrda(USART_TypeDef *USARTx)
1086:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1087:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
1088:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1089:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1090:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1091:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable IrDA mode
1092:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1093:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1094:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_DisableIrda
1095:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1096:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1097:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1098:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIrda(USART_TypeDef *USARTx)
1099:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1100:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_IREN);
1101:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1102:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1103:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1104:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Indicate if IrDA mode is enabled
1105:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1106:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1107:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_IsEnabledIrda
1108:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1109:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1110:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1111:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIrda(USART_TypeDef *USARTx)
1112:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1113:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_IREN) == (USART_CR3_IREN));
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 51


1114:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1115:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1116:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1117:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Configure IrDA Power Mode (Normal or Low Power)
1118:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1119:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1120:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_SetIrdaPowerMode
1121:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1122:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  PowerMode This parameter can be one of the following values:
1123:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
1124:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_LOW
1125:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1126:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1127:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPowerMode(USART_TypeDef *USARTx, uint32_t PowerMode)
1128:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1129:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_IRLP, PowerMode);
1130:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1131:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1132:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1133:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Retrieve IrDA Power Mode configuration (Normal or Low Power)
1134:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1135:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1136:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_GetIrdaPowerMode
1137:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1138:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1139:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
1140:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
1141:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1142:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPowerMode(USART_TypeDef *USARTx)
1143:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1144:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_IRLP));
1145:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1146:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1147:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1148:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Set Irda prescaler value, used for dividing the USART clock source
1149:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
1150:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1151:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1152:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetIrdaPrescaler
1153:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1154:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0x00 and Max_Data=0xFF
1155:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1156:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1157:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
1158:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1159:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_PSC, PrescalerValue);
1160:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1161:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1162:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1163:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Return Irda prescaler value, used for dividing the USART clock source
1164:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
1165:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1166:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1167:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetIrdaPrescaler
1168:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1169:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Irda prescaler value (Value between Min_Data=0x00 and Max_Data=0xFF)
1170:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 52


1171:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPrescaler(USART_TypeDef *USARTx)
1172:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1173:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
1174:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1175:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1176:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1177:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
1178:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1179:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1180:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_Smartcard Configuration functions related to Smartcard feat
1181:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
1182:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1183:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1184:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1185:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable Smartcard NACK transmission
1186:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1187:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1188:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_EnableSmartcardNACK
1189:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1190:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1191:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1192:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcardNACK(USART_TypeDef *USARTx)
1193:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1194:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_NACK);
1195:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1196:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1197:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1198:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable Smartcard NACK transmission
1199:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1200:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1201:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_DisableSmartcardNACK
1202:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1203:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1204:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1205:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcardNACK(USART_TypeDef *USARTx)
1206:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1207:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_NACK);
1208:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1209:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1210:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1211:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Indicate if Smartcard NACK transmission is enabled
1212:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1213:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1214:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_IsEnabledSmartcardNACK
1215:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1216:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1217:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1218:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcardNACK(USART_TypeDef *USARTx)
1219:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1220:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_NACK) == (USART_CR3_NACK));
1221:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1222:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1223:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1224:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable Smartcard mode
1225:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1226:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1227:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_EnableSmartcard
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 53


1228:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1229:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1230:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1231:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcard(USART_TypeDef *USARTx)
1232:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1233:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
1234:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1235:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1236:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1237:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable Smartcard mode
1238:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1239:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1240:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_DisableSmartcard
1241:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1242:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1243:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1244:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcard(USART_TypeDef *USARTx)
1245:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1246:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_SCEN);
1247:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1248:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1249:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1250:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Indicate if Smartcard mode is enabled
1251:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1252:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1253:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_IsEnabledSmartcard
1254:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1255:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1256:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1257:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcard(USART_TypeDef *USARTx)
1258:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1259:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_SCEN) == (USART_CR3_SCEN));
1260:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1261:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1262:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1263:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Set Smartcard prescaler value, used for dividing the USART clock
1264:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
1265:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1266:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1267:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetSmartcardPrescaler
1268:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1269:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0 and Max_Data=31
1270:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1271:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1272:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
1273:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1274:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_PSC, PrescalerValue);
1275:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1276:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1277:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1278:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Return Smartcard prescaler value, used for dividing the USART clock
1279:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
1280:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1281:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1282:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetSmartcardPrescaler
1283:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1284:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Smartcard prescaler value (Value between Min_Data=0 and Max_Data=31)
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 54


1285:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1286:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardPrescaler(USART_TypeDef *USARTx)
1287:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1288:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
1289:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1290:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1291:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1292:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Set Smartcard Guard time value, expressed in nb of baud clocks periods
1293:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
1294:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1295:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1296:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_SetSmartcardGuardTime
1297:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1298:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  GuardTime Value between Min_Data=0x00 and Max_Data=0xFF
1299:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1300:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1301:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardGuardTime(USART_TypeDef *USARTx, uint32_t GuardTime)
1302:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1303:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_GT, GuardTime << USART_POSITION_GTPR_GT);
1304:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1305:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1306:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1307:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Return Smartcard Guard time value, expressed in nb of baud clocks periods
1308:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
1309:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1310:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1311:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_GetSmartcardGuardTime
1312:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1313:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Smartcard Guard time value (Value between Min_Data=0x00 and Max_Data=0xFF)
1314:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1315:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardGuardTime(USART_TypeDef *USARTx)
1316:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1317:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_GT) >> USART_POSITION_GTPR_GT);
1318:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1319:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1320:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1321:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
1322:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1323:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1324:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_HalfDuplex Configuration functions related to Half Duplex f
1325:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
1326:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1327:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1328:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1329:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable Single Wire Half-Duplex mode
1330:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1331:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1332:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_EnableHalfDuplex
1333:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1334:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1335:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1336:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
1337:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1338:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
1339:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1340:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1341:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 55


1342:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable Single Wire Half-Duplex mode
1343:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1344:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1345:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_DisableHalfDuplex
1346:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1347:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1348:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1349:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableHalfDuplex(USART_TypeDef *USARTx)
1350:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1351:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
1352:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1353:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1354:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1355:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Indicate if Single Wire Half-Duplex mode is enabled
1356:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1357:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1358:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_IsEnabledHalfDuplex
1359:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1360:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1361:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1362:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledHalfDuplex(USART_TypeDef *USARTx)
1363:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1364:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_HDSEL) == (USART_CR3_HDSEL));
1365:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1366:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1367:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1368:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
1369:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1370:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1371:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_LIN Configuration functions related to LIN feature
1372:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
1373:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1374:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1375:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1376:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Set LIN Break Detection Length
1377:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1378:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1379:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_SetLINBrkDetectionLen
1380:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1381:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  LINBDLength This parameter can be one of the following values:
1382:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
1383:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
1384:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1385:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1386:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLINBrkDetectionLen(USART_TypeDef *USARTx, uint32_t LINBDLength)
1387:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1388:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBDL, LINBDLength);
1389:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1390:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1391:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1392:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Return LIN Break Detection Length
1393:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1394:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1395:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_GetLINBrkDetectionLen
1396:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1397:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1398:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 56


1399:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
1400:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1401:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLINBrkDetectionLen(USART_TypeDef *USARTx)
1402:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1403:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBDL));
1404:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1405:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1406:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1407:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable LIN mode
1408:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1409:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1410:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_EnableLIN
1411:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1412:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1413:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1414:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableLIN(USART_TypeDef *USARTx)
1415:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1416:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
1417:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1418:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1419:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1420:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable LIN mode
1421:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1422:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1423:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_DisableLIN
1424:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1425:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1426:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1427:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableLIN(USART_TypeDef *USARTx)
1428:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1429:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LINEN);
1430:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1431:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1432:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1433:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Indicate if LIN mode is enabled
1434:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1435:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1436:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_IsEnabledLIN
1437:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1438:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1439:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1440:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledLIN(USART_TypeDef *USARTx)
1441:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1442:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_LINEN) == (USART_CR2_LINEN));
1443:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1444:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1445:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1446:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
1447:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1448:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1449:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EF_AdvancedConfiguration Advanced Configurations services
1450:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
1451:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1452:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1453:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1454:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Asynchronous Mode (UART)
1455:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   In UART mode, the following bits must be kept cleared:
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 57


1456:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1457:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
1458:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1459:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1460:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1461:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1462:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1463:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1464:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1465:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1466:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1467:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Other remaining configurations items related to Asynchronous Mode
1468:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
1469:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         dedicated functions
1470:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigAsyncMode\n
1471:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigAsyncMode\n
1472:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigAsyncMode\n
1473:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigAsyncMode\n
1474:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigAsyncMode
1475:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1476:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1477:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1478:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
1479:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1480:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   /* In Asynchronous mode, the following bits must be kept cleared:
1481:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   - LINEN, CLKEN bits in the USART_CR2 register,
1482:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
1483:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1484:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
1485:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1486:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1487:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1488:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Synchronous Mode
1489:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   In Synchronous mode, the following bits must be kept cleared:
1490:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1491:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1492:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1493:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1494:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         This function also sets the USART in Synchronous mode.
1495:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1496:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1497:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1498:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1499:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1500:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1501:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1502:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
1503:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Other remaining configurations items related to Synchronous Mode
1504:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, Clock Polarity, ...) should be set using
1505:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         dedicated functions
1506:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSyncMode\n
1507:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSyncMode\n
1508:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSyncMode\n
1509:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigSyncMode\n
1510:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSyncMode
1511:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1512:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 58


1513:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1514:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSyncMode(USART_TypeDef *USARTx)
1515:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1516:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   /* In Synchronous mode, the following bits must be kept cleared:
1517:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   - LINEN bit in the USART_CR2 register,
1518:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
1519:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
1520:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
1521:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   /* set the UART/USART in Synchronous mode */
1522:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
1523:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1524:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1525:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1526:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in LIN Mode
1527:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   In LIN mode, the following bits must be kept cleared:
1528:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
1529:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1530:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1531:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1532:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         This function also set the UART/USART in LIN mode.
1533:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1534:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1535:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1536:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1537:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
1538:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1539:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1540:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1541:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Set LINEN in CR2 using @ref LL_USART_EnableLIN() function
1542:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Other remaining configurations items related to LIN Mode
1543:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         (as Baud Rate, Word length, LIN Break Detection Length, ...) should be set using
1544:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         dedicated functions
1545:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_ConfigLINMode\n
1546:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigLINMode\n
1547:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR2          LINEN         LL_USART_ConfigLINMode\n
1548:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigLINMode\n
1549:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigLINMode\n
1550:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigLINMode
1551:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1552:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1553:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1554:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigLINMode(USART_TypeDef *USARTx)
1555:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1556:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   /* In LIN mode, the following bits must be kept cleared:
1557:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   - STOP and CLKEN bits in the USART_CR2 register,
1558:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   - IREN, SCEN and HDSEL bits in the USART_CR3 register.*/
1559:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_CLKEN | USART_CR2_STOP));
1560:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_SCEN | USART_CR3_HDSEL));
1561:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   /* Set the UART/USART in LIN mode */
1562:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
1563:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1564:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1565:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1566:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Half Duplex Mode
1567:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   In Half Duplex mode, the following bits must be kept cleared:
1568:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1569:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 59


1570:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1571:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1572:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         This function also sets the UART/USART in Half Duplex mode.
1573:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1574:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1575:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1576:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1577:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1578:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1579:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1580:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Set HDSEL in CR3 using @ref LL_USART_EnableHalfDuplex() function
1581:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Other remaining configurations items related to Half Duplex Mode
1582:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
1583:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         dedicated functions
1584:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigHalfDuplexMode\n
1585:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigHalfDuplexMode\n
1586:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigHalfDuplexMode\n
1587:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigHalfDuplexMode\n
1588:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigHalfDuplexMode
1589:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1590:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1591:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1592:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigHalfDuplexMode(USART_TypeDef *USARTx)
1593:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1594:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   /* In Half Duplex mode, the following bits must be kept cleared:
1595:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   - LINEN and CLKEN bits in the USART_CR2 register,
1596:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   - SCEN and IREN bits in the USART_CR3 register.*/
1597:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1598:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
1599:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   /* set the UART/USART in Half Duplex mode */
1600:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
1601:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1602:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1603:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1604:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Smartcard Mode
1605:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   In Smartcard mode, the following bits must be kept cleared:
1606:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1607:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1608:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1609:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         This function also configures Stop bits to 1.5 bits and
1610:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         sets the USART in Smartcard mode (SCEN bit).
1611:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Clock Output is also enabled (CLKEN).
1612:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1613:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1614:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1615:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1616:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1617:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1618:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
1619:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
1620:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Set SCEN in CR3 using @ref LL_USART_EnableSmartcard() function
1621:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Other remaining configurations items related to Smartcard Mode
1622:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
1623:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         dedicated functions
1624:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSmartcardMode\n
1625:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigSmartcardMode\n
1626:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSmartcardMode\n
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 60


1627:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSmartcardMode\n
1628:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSmartcardMode
1629:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1630:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1631:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1632:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSmartcardMode(USART_TypeDef *USARTx)
1633:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1634:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   /* In Smartcard mode, the following bits must be kept cleared:
1635:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   - LINEN bit in the USART_CR2 register,
1636:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   - IREN and HDSEL bits in the USART_CR3 register.*/
1637:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
1638:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
1639:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   /* Configure Stop bits to 1.5 bits */
1640:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   /* Synchronous mode is activated by default */
1641:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR2, (USART_CR2_STOP_0 | USART_CR2_STOP_1 | USART_CR2_CLKEN));
1642:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   /* set the UART/USART in Smartcard mode */
1643:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
1644:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1645:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1646:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1647:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Irda Mode
1648:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   In IRDA mode, the following bits must be kept cleared:
1649:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1650:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
1651:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1652:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1653:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         This function also sets the UART/USART in IRDA mode (IREN bit).
1654:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1655:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1656:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1657:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1658:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1659:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1660:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1661:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
1662:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Set IREN in CR3 using @ref LL_USART_EnableIrda() function
1663:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Other remaining configurations items related to Irda Mode
1664:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         (as Baud Rate, Word length, Power mode, ...) should be set using
1665:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         dedicated functions
1666:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigIrdaMode\n
1667:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigIrdaMode\n
1668:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigIrdaMode\n
1669:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigIrdaMode\n
1670:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigIrdaMode\n
1671:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigIrdaMode
1672:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1673:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1674:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1675:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigIrdaMode(USART_TypeDef *USARTx)
1676:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1677:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   /* In IRDA mode, the following bits must be kept cleared:
1678:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   - LINEN, STOP and CLKEN bits in the USART_CR2 register,
1679:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   - SCEN and HDSEL bits in the USART_CR3 register.*/
1680:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN | USART_CR2_STOP));
1681:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
1682:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   /* set the UART/USART in IRDA mode */
1683:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 61


1684:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1685:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1686:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1687:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Multi processor Mode
1688:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         (several USARTs connected in a network, one of the USARTs can be the master,
1689:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         its TX output connected to the RX inputs of the other slaves USARTs).
1690:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   In MultiProcessor mode, the following bits must be kept cleared:
1691:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1692:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
1693:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1694:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1695:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1696:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1697:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1698:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1699:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1700:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1701:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1702:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Other remaining configurations items related to Multi processor Mode
1703:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         (as Baud Rate, Wake Up Method, Node address, ...) should be set using
1704:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         dedicated functions
1705:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigMultiProcessMode\n
1706:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigMultiProcessMode\n
1707:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigMultiProcessMode\n
1708:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigMultiProcessMode\n
1709:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigMultiProcessMode
1710:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1711:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1712:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1713:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigMultiProcessMode(USART_TypeDef *USARTx)
1714:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1715:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   /* In Multi Processor mode, the following bits must be kept cleared:
1716:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   - LINEN and CLKEN bits in the USART_CR2 register,
1717:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   - IREN, SCEN and HDSEL bits in the USART_CR3 register.*/
1718:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1719:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
1720:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1721:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1722:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1723:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
1724:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1725:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1726:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EF_FLAG_Management FLAG_Management
1727:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
1728:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1729:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1730:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1731:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART Parity Error Flag is set or not
1732:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           PE            LL_USART_IsActiveFlag_PE
1733:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1734:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1735:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1736:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_PE(USART_TypeDef *USARTx)
1737:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1738:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
1739:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1740:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 62


1741:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1742:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART Framing Error Flag is set or not
1743:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
1744:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1745:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1746:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1747:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(USART_TypeDef *USARTx)
1748:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1749:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
1750:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1751:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1752:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1753:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART Noise error detected Flag is set or not
1754:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
1755:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1756:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1757:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1758:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(USART_TypeDef *USARTx)
1759:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1760:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
1761:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1762:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1763:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1764:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART OverRun Error Flag is set or not
1765:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
1766:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1767:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1768:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1769:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
1770:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1771:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
1772:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1773:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1774:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1775:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART IDLE line detected Flag is set or not
1776:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           IDLE          LL_USART_IsActiveFlag_IDLE
1777:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1778:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1779:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1780:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
1781:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1782:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
1783:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1784:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1785:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1786:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART Read Data Register Not Empty Flag is set or not
1787:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
1788:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1789:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1790:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1791:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
1792:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1793:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
1794:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1795:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1796:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1797:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART Transmission Complete Flag is set or not
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 63


1798:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
1799:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1800:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1801:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1802:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
1803:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1804:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
1805:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1806:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1807:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1808:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART Transmit Data Register Empty Flag is set or not
1809:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
1810:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1811:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1812:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1813:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
1814:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1815:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
1816:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1817:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1818:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1819:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART LIN Break Detection Flag is set or not
1820:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1821:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1822:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           LBD           LL_USART_IsActiveFlag_LBD
1823:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1824:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1825:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1826:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_LBD(USART_TypeDef *USARTx)
1827:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1828:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_LBD) == (USART_SR_LBD));
1829:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1830:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1831:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1832:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART CTS Flag is set or not
1833:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1834:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1835:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           CTS           LL_USART_IsActiveFlag_nCTS
1836:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1837:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1838:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1839:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_nCTS(USART_TypeDef *USARTx)
1840:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1841:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_CTS) == (USART_SR_CTS));
1842:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1843:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1844:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1845:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART Send Break Flag is set or not
1846:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          SBK           LL_USART_IsActiveFlag_SBK
1847:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1848:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1849:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1850:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_SBK(USART_TypeDef *USARTx)
1851:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1852:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_SBK) == (USART_CR1_SBK));
1853:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1854:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 64


1855:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1856:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART Receive Wake Up from mute mode Flag is set or not
1857:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          RWU           LL_USART_IsActiveFlag_RWU
1858:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1859:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1860:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1861:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RWU(USART_TypeDef *USARTx)
1862:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1863:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_RWU) == (USART_CR1_RWU));
1864:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1865:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1866:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1867:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Clear Parity Error Flag
1868:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1869:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1870:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as
1871:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         NE, FE, ORE, IDLE would also be cleared.
1872:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           PE            LL_USART_ClearFlag_PE
1873:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1874:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1875:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1876:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
1877:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1878:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   __IO uint32_t tmpreg;
1879:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   tmpreg = USARTx->SR;
1880:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   (void) tmpreg;
1881:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   tmpreg = USARTx->DR;
1882:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   (void) tmpreg;
1883:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1884:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1885:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1886:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Clear Framing Error Flag
1887:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1888:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1889:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as
1890:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         PE, NE, ORE, IDLE would also be cleared.
1891:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           FE            LL_USART_ClearFlag_FE
1892:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1893:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1894:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1895:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
1896:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1897:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   __IO uint32_t tmpreg;
1898:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   tmpreg = USARTx->SR;
1899:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   (void) tmpreg;
1900:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   tmpreg = USARTx->DR;
1901:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   (void) tmpreg;
1902:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1903:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1904:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1905:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Clear Noise detected Flag
1906:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1907:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1908:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as
1909:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         PE, FE, ORE, IDLE would also be cleared.
1910:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           NF            LL_USART_ClearFlag_NE
1911:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 65


1912:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1913:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1914:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
1915:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1916:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   __IO uint32_t tmpreg;
1917:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   tmpreg = USARTx->SR;
1918:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   (void) tmpreg;
1919:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   tmpreg = USARTx->DR;
1920:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   (void) tmpreg;
1921:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1922:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1923:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1924:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Clear OverRun Error Flag
1925:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1926:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1927:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as
1928:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         PE, NE, FE, IDLE would also be cleared.
1929:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
1930:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1931:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1932:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1933:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
1934:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1935:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   __IO uint32_t tmpreg;
1936:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   tmpreg = USARTx->SR;
1937:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   (void) tmpreg;
1938:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   tmpreg = USARTx->DR;
1939:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   (void) tmpreg;
1940:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1941:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1942:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1943:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Clear IDLE line detected Flag
1944:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1945:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1946:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as
1947:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         PE, NE, FE, ORE would also be cleared.
1948:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           IDLE          LL_USART_ClearFlag_IDLE
1949:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1950:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1951:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1952:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
1953:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1954:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   __IO uint32_t tmpreg;
1955:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   tmpreg = USARTx->SR;
1956:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   (void) tmpreg;
1957:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   tmpreg = USARTx->DR;
1958:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   (void) tmpreg;
1959:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1960:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1961:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1962:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Clear Transmission Complete Flag
1963:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           TC            LL_USART_ClearFlag_TC
1964:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1965:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1966:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1967:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
1968:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 66


1969:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   WRITE_REG(USARTx->SR, ~(USART_SR_TC));
1970:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1971:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1972:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1973:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Clear RX Not Empty Flag
1974:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           RXNE          LL_USART_ClearFlag_RXNE
1975:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1976:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1977:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1978:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_RXNE(USART_TypeDef *USARTx)
1979:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1980:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
1981:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1982:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1983:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1984:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Clear LIN Break Detection Flag
1985:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1986:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1987:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           LBD           LL_USART_ClearFlag_LBD
1988:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1989:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1990:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1991:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
1992:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1993:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   WRITE_REG(USARTx->SR, ~(USART_SR_LBD));
1994:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1995:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1996:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1997:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Clear CTS Interrupt Flag
1998:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1999:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2000:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           CTS           LL_USART_ClearFlag_nCTS
2001:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2002:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2003:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2004:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_nCTS(USART_TypeDef *USARTx)
2005:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2006:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   WRITE_REG(USARTx->SR, ~(USART_SR_CTS));
2007:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2008:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2009:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2010:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
2011:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2012:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2013:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EF_IT_Management IT_Management
2014:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
2015:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2016:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2017:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2018:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable IDLE Interrupt
2019:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
2020:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2021:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2022:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2023:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
2024:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2025:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 67


2026:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2027:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2028:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2029:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable RX Not Empty Interrupt
2030:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
2031:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2032:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2033:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2034:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
  69              		.loc 3 2034 22 view .LVU12
  70              	.LBB19:
2035:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2036:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
  71              		.loc 3 2036 3 view .LVU13
  72 0018 064A     		ldr	r2, .L5+8
  73 001a D368     		ldr	r3, [r2, #12]
  74 001c 43F02003 		orr	r3, r3, #32
  75 0020 D360     		str	r3, [r2, #12]
  76              	.LVL4:
  77              		.loc 3 2036 3 is_stmt 0 view .LVU14
  78              	.LBE19:
  79              	.LBE18:
  67:user/src/uart_print_user.c ****   
  68:user/src/uart_print_user.c **** }
  80              		.loc 1 68 1 view .LVU15
  81 0022 08BD     		pop	{r3, pc}
  82              	.L4:
  61:user/src/uart_print_user.c **** 	}
  83              		.loc 1 61 5 is_stmt 1 view .LVU16
  84 0024 FFF7FEFF 		bl	Error_Handler
  85              	.LVL5:
  86 0028 F4E7     		b	.L2
  87              	.L6:
  88 002a 00BF     		.align	2
  89              	.L5:
  90 002c 00E100E0 		.word	-536813312
  91 0030 00000000 		.word	uartRxBuff
  92 0034 00380140 		.word	1073821696
  93              		.cfi_endproc
  94              	.LFE832:
  96              		.section	.text.sendData,"ax",%progbits
  97              		.align	1
  98              		.global	sendData
  99              		.syntax unified
 100              		.thumb
 101              		.thumb_func
 102              		.fpu softvfp
 104              	sendData:
 105              	.LVL6:
 106              	.LFB833:
  69:user/src/uart_print_user.c **** 
  70:user/src/uart_print_user.c **** 
  71:user/src/uart_print_user.c **** void sendData(uint8_t *data, uint32_t numOfBytes){
 107              		.loc 1 71 50 view -0
 108              		.cfi_startproc
 109              		@ args = 0, pretend = 0, frame = 0
 110              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 68


 111              		.loc 1 71 50 is_stmt 0 view .LVU18
 112 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 113              	.LCFI1:
 114              		.cfi_def_cfa_offset 24
 115              		.cfi_offset 3, -24
 116              		.cfi_offset 4, -20
 117              		.cfi_offset 5, -16
 118              		.cfi_offset 6, -12
 119              		.cfi_offset 7, -8
 120              		.cfi_offset 14, -4
 121 0002 0746     		mov	r7, r0
 122 0004 0E46     		mov	r6, r1
  72:user/src/uart_print_user.c **** 	uint32_t byteNum = 0;
 123              		.loc 1 72 2 is_stmt 1 view .LVU19
 124              	.LVL7:
  73:user/src/uart_print_user.c **** 	uint32_t endTime = LL_GetTick() + UART_TX_TIMEOUT_MSEC;
 125              		.loc 1 73 2 view .LVU20
 126              		.loc 1 73 21 is_stmt 0 view .LVU21
 127 0006 FFF7FEFF 		bl	LL_GetTick
 128              	.LVL8:
 129              		.loc 1 73 11 view .LVU22
 130 000a 00F10A04 		add	r4, r0, #10
 131              	.LVL9:
  74:user/src/uart_print_user.c **** 
  75:user/src/uart_print_user.c **** 
  76:user/src/uart_print_user.c **** 	for(byteNum=0; byteNum < numOfBytes; byteNum++)
 132              		.loc 1 76 2 is_stmt 1 view .LVU23
 133              		.loc 1 76 13 is_stmt 0 view .LVU24
 134 000e 0025     		movs	r5, #0
 135              		.loc 1 76 2 view .LVU25
 136 0010 0FE0     		b	.L8
 137              	.LVL10:
 138              	.L18:
  77:user/src/uart_print_user.c **** 	{
  78:user/src/uart_print_user.c **** 		// wait until UART TX buffer is not empty
  79:user/src/uart_print_user.c **** 		while(!LL_USART_IsActiveFlag_TXE(UART_DRIVER))
  80:user/src/uart_print_user.c **** 		{
  81:user/src/uart_print_user.c **** 			if(LL_GetTick() > endTime)
  82:user/src/uart_print_user.c **** 			{
  83:user/src/uart_print_user.c **** 				Error_Handler();
  84:user/src/uart_print_user.c **** 			}
  85:user/src/uart_print_user.c **** 		}
  86:user/src/uart_print_user.c **** 
  87:user/src/uart_print_user.c **** 		// send data
  88:user/src/uart_print_user.c **** 		LL_USART_TransmitData8(UART_DRIVER, *(data + byteNum));
 139              		.loc 1 88 3 is_stmt 1 view .LVU26
 140 0012 7A5D     		ldrb	r2, [r7, r5]	@ zero_extendqisi2
 141              	.LVL11:
 142              	.LBB20:
 143              	.LBI20:
2037:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2038:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2039:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2040:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable Transmission Complete Interrupt
2041:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
2042:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2043:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 69


2044:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2045:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
2046:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2047:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_TCIE);
2048:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2049:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2050:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2051:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable TX Empty Interrupt
2052:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
2053:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2054:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2055:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2056:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
2057:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2058:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
2059:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2060:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2061:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2062:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable Parity Error Interrupt
2063:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_EnableIT_PE
2064:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2065:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2066:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2067:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_PE(USART_TypeDef *USARTx)
2068:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2069:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_PEIE);
2070:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2071:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2072:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2073:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable LIN Break Detection Interrupt
2074:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2075:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2076:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_EnableIT_LBD
2077:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2078:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2079:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2080:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_LBD(USART_TypeDef *USARTx)
2081:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2082:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
2083:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2084:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2085:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2086:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable Error Interrupt
2087:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   When set, Error Interrupt Enable Bit is enabling interrupt generation in case of a fram
2088:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USARTx_SR register).
2089:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           0: Interrupt is inhibited
2090:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the USARTx_SR register.
2091:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
2092:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2093:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2094:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2095:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
2096:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2097:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_EIE);
2098:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2099:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2100:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 70


2101:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable CTS Interrupt
2102:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2103:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2104:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_EnableIT_CTS
2105:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2106:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2107:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2108:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_CTS(USART_TypeDef *USARTx)
2109:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2110:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_CTSIE);
2111:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2112:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2113:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2114:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable IDLE Interrupt
2115:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_DisableIT_IDLE
2116:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2117:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2118:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2119:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_IDLE(USART_TypeDef *USARTx)
2120:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2121:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
2122:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2123:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2124:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2125:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable RX Not Empty Interrupt
2126:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
2127:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2128:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2129:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2130:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
2131:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2132:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
2133:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2134:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2135:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2136:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable Transmission Complete Interrupt
2137:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
2138:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2139:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2140:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2141:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
2142:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2143:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
2144:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2145:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2146:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2147:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable TX Empty Interrupt
2148:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
2149:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2150:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2151:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2152:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
2153:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2154:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
2155:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2156:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2157:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 71


2158:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable Parity Error Interrupt
2159:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_DisableIT_PE
2160:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2161:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2162:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2163:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_PE(USART_TypeDef *USARTx)
2164:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2165:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
2166:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2167:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2168:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2169:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable LIN Break Detection Interrupt
2170:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2171:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2172:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_DisableIT_LBD
2173:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2174:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2175:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2176:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_LBD(USART_TypeDef *USARTx)
2177:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2178:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
2179:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2180:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2181:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2182:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable Error Interrupt
2183:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   When set, Error Interrupt Enable Bit is enabling interrupt generation in case of a fram
2184:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USARTx_SR register).
2185:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           0: Interrupt is inhibited
2186:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the USARTx_SR register.
2187:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_DisableIT_ERROR
2188:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2189:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2190:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2191:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
2192:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2193:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
2194:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2195:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2196:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2197:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable CTS Interrupt
2198:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2199:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2200:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
2201:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2202:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2203:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2204:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
2205:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2206:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
2207:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2208:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2209:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2210:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART IDLE Interrupt  source is enabled or disabled.
2211:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_IsEnabledIT_IDLE
2212:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2213:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2214:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 72


2215:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(USART_TypeDef *USARTx)
2216:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2217:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
2218:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2219:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2220:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2221:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART RX Not Empty Interrupt is enabled or disabled.
2222:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
2223:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2224:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2225:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2226:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
2227:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2228:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
2229:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2230:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2231:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2232:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART Transmission Complete Interrupt is enabled or disabled.
2233:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_IsEnabledIT_TC
2234:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2235:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2236:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2237:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TC(USART_TypeDef *USARTx)
2238:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2239:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
2240:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2241:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2242:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2243:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART TX Empty Interrupt is enabled or disabled.
2244:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
2245:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2246:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2247:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2248:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(USART_TypeDef *USARTx)
2249:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2250:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
2251:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2252:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2253:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2254:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART Parity Error Interrupt is enabled or disabled.
2255:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_IsEnabledIT_PE
2256:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2257:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2258:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2259:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_PE(USART_TypeDef *USARTx)
2260:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2261:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_PEIE) == (USART_CR1_PEIE));
2262:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2263:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2264:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2265:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART LIN Break Detection Interrupt is enabled or disabled.
2266:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2267:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2268:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_IsEnabledIT_LBD
2269:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2270:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2271:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 73


2272:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_LBD(USART_TypeDef *USARTx)
2273:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2274:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_LBDIE) == (USART_CR2_LBDIE));
2275:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2276:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2277:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2278:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART Error Interrupt is enabled or disabled.
2279:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_IsEnabledIT_ERROR
2280:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2281:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2282:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2283:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
2284:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2285:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
2286:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2287:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2288:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2289:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART CTS Interrupt is enabled or disabled.
2290:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2291:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2292:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_IsEnabledIT_CTS
2293:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2294:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2295:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2296:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_CTS(USART_TypeDef *USARTx)
2297:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2298:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_CTSIE) == (USART_CR3_CTSIE));
2299:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2300:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2301:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2302:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
2303:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2304:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2305:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EF_DMA_Management DMA_Management
2306:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
2307:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2308:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2309:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2310:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable DMA Mode for reception
2311:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
2312:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2313:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2314:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2315:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
2316:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2317:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_DMAR);
2318:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2319:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2320:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2321:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable DMA Mode for reception
2322:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_DisableDMAReq_RX
2323:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2324:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2325:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2326:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
2327:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2328:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 74


2329:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2330:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2331:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2332:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if DMA Mode is enabled for reception
2333:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_IsEnabledDMAReq_RX
2334:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2335:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2336:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2337:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDMAReq_RX(USART_TypeDef *USARTx)
2338:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2339:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_DMAR) == (USART_CR3_DMAR));
2340:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2341:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2342:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2343:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable DMA Mode for transmission
2344:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
2345:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2346:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2347:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2348:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
2349:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2350:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_DMAT);
2351:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2352:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2353:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2354:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable DMA Mode for transmission
2355:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          DMAT          LL_USART_DisableDMAReq_TX
2356:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2357:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2358:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2359:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDMAReq_TX(USART_TypeDef *USARTx)
2360:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2361:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_DMAT);
2362:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2363:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2364:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2365:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if DMA Mode is enabled for transmission
2366:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          DMAT          LL_USART_IsEnabledDMAReq_TX
2367:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2368:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2369:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2370:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDMAReq_TX(USART_TypeDef *USARTx)
2371:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2372:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_DMAT) == (USART_CR3_DMAT));
2373:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2374:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2375:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2376:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Get the data register address used for DMA transfer
2377:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll DR           DR            LL_USART_DMA_GetRegAddr
2378:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Address of Data Register is valid for both Transmit and Receive transfers.
2379:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2380:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Address of data register
2381:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2382:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx)
2383:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2384:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   /* return address of DR register */
2385:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return ((uint32_t) & (USARTx->DR));
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 75


2386:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2387:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2388:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2389:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
2390:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2391:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2392:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EF_Data_Management Data_Management
2393:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
2394:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2395:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2396:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2397:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Read Receiver Data register (Receive Data value, 8 bits)
2398:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll DR           DR            LL_USART_ReceiveData8
2399:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2400:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
2401:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2402:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
2403:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2404:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
2405:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2406:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2407:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2408:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Read Receiver Data register (Receive Data value, 9 bits)
2409:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll DR           DR            LL_USART_ReceiveData9
2410:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2411:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
2412:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2413:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
2414:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2415:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint16_t)(READ_BIT(USARTx->DR, USART_DR_DR));
2416:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2417:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2418:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2419:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Write in Transmitter Data Register (Transmit Data value, 8 bits)
2420:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll DR           DR            LL_USART_TransmitData8
2421:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2422:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  Value between Min_Data=0x00 and Max_Data=0xFF
2423:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2424:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2425:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
 144              		.loc 3 2425 22 view .LVU27
 145              	.LBB21:
2426:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2427:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   USARTx->DR = Value;
 146              		.loc 3 2427 3 view .LVU28
 147              		.loc 3 2427 14 is_stmt 0 view .LVU29
 148 0014 0E4B     		ldr	r3, .L19
 149 0016 5A60     		str	r2, [r3, #4]
 150              	.LVL12:
 151              	.L12:
 152              		.loc 3 2427 14 view .LVU30
 153              	.LBE21:
 154              	.LBE20:
 155              	.LBB22:
 156              	.LBI22:
1813:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 157              		.loc 3 1813 26 is_stmt 1 view .LVU31
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 76


 158              	.LBB23:
1815:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 159              		.loc 3 1815 3 view .LVU32
1815:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 160              		.loc 3 1815 11 is_stmt 0 view .LVU33
 161 0018 0D4B     		ldr	r3, .L19
 162 001a 1B68     		ldr	r3, [r3]
 163              	.LVL13:
1815:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 164              		.loc 3 1815 11 view .LVU34
 165              	.LBE23:
 166              	.LBE22:
  89:user/src/uart_print_user.c **** 	
  90:user/src/uart_print_user.c **** 		// wait until TX buffer is not empty
  91:user/src/uart_print_user.c **** 		while(!LL_USART_IsActiveFlag_TXE(UART_DRIVER))
 167              		.loc 1 91 8 view .LVU35
 168 001c 13F0800F 		tst	r3, #128
 169 0020 06D1     		bne	.L16
  92:user/src/uart_print_user.c **** 		{
  93:user/src/uart_print_user.c **** 			if(LL_GetTick() > endTime)
 170              		.loc 1 93 4 is_stmt 1 view .LVU36
 171              		.loc 1 93 7 is_stmt 0 view .LVU37
 172 0022 FFF7FEFF 		bl	LL_GetTick
 173              	.LVL14:
 174              		.loc 1 93 6 view .LVU38
 175 0026 A042     		cmp	r0, r4
 176 0028 F6D9     		bls	.L12
  94:user/src/uart_print_user.c **** 			{
  95:user/src/uart_print_user.c **** 				Error_Handler();
 177              		.loc 1 95 5 is_stmt 1 view .LVU39
 178 002a FFF7FEFF 		bl	Error_Handler
 179              	.LVL15:
 180 002e F3E7     		b	.L12
 181              	.L16:
  76:user/src/uart_print_user.c **** 	{
 182              		.loc 1 76 46 is_stmt 0 discriminator 2 view .LVU40
 183 0030 0135     		adds	r5, r5, #1
 184              	.LVL16:
 185              	.L8:
  76:user/src/uart_print_user.c **** 	{
 186              		.loc 1 76 2 discriminator 1 view .LVU41
 187 0032 B542     		cmp	r5, r6
 188 0034 0BD2     		bcs	.L17
 189              	.L9:
 190              	.LVL17:
 191              	.LBB24:
 192              	.LBI24:
1813:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 193              		.loc 3 1813 26 is_stmt 1 view .LVU42
 194              	.LBB25:
1815:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 195              		.loc 3 1815 3 view .LVU43
1815:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 196              		.loc 3 1815 11 is_stmt 0 view .LVU44
 197 0036 064B     		ldr	r3, .L19
 198 0038 1B68     		ldr	r3, [r3]
 199              	.LVL18:
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 77


1815:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 200              		.loc 3 1815 11 view .LVU45
 201              	.LBE25:
 202              	.LBE24:
  79:user/src/uart_print_user.c **** 		{
 203              		.loc 1 79 8 view .LVU46
 204 003a 13F0800F 		tst	r3, #128
 205 003e E8D1     		bne	.L18
  81:user/src/uart_print_user.c **** 			{
 206              		.loc 1 81 4 is_stmt 1 view .LVU47
  81:user/src/uart_print_user.c **** 			{
 207              		.loc 1 81 7 is_stmt 0 view .LVU48
 208 0040 FFF7FEFF 		bl	LL_GetTick
 209              	.LVL19:
  81:user/src/uart_print_user.c **** 			{
 210              		.loc 1 81 6 view .LVU49
 211 0044 A042     		cmp	r0, r4
 212 0046 F6D9     		bls	.L9
  83:user/src/uart_print_user.c **** 			}
 213              		.loc 1 83 5 is_stmt 1 view .LVU50
 214 0048 FFF7FEFF 		bl	Error_Handler
 215              	.LVL20:
 216 004c F3E7     		b	.L9
 217              	.L17:
  96:user/src/uart_print_user.c **** 			}
  97:user/src/uart_print_user.c **** 		}
  98:user/src/uart_print_user.c **** 	}
  99:user/src/uart_print_user.c **** }
 218              		.loc 1 99 1 is_stmt 0 view .LVU51
 219 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 220              	.LVL21:
 221              	.L20:
 222              		.loc 1 99 1 view .LVU52
 223              		.align	2
 224              	.L19:
 225 0050 00380140 		.word	1073821696
 226              		.cfi_endproc
 227              	.LFE833:
 229              		.section	.text.receiveByte,"ax",%progbits
 230              		.align	1
 231              		.global	receiveByte
 232              		.syntax unified
 233              		.thumb
 234              		.thumb_func
 235              		.fpu softvfp
 237              	receiveByte:
 238              	.LFB834:
 100:user/src/uart_print_user.c **** 
 101:user/src/uart_print_user.c **** uint8_t receiveByte(void)
 102:user/src/uart_print_user.c **** {
 239              		.loc 1 102 1 is_stmt 1 view -0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 0
 242              		@ frame_needed = 0, uses_anonymous_args = 0
 243              		@ link register save eliminated.
 103:user/src/uart_print_user.c **** 	uint8_t byte = LL_USART_ReceiveData8(UART_DRIVER);
 244              		.loc 1 103 2 view .LVU54
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 78


 245              	.LVL22:
 246              	.LBB26:
 247              	.LBI26:
2402:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 248              		.loc 3 2402 25 view .LVU55
 249              	.LBB27:
2404:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 250              		.loc 3 2404 3 view .LVU56
2404:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 251              		.loc 3 2404 20 is_stmt 0 view .LVU57
 252 0000 014B     		ldr	r3, .L22
 253 0002 5868     		ldr	r0, [r3, #4]
 254              	.LVL23:
2404:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 255              		.loc 3 2404 20 view .LVU58
 256              	.LBE27:
 257              	.LBE26:
 104:user/src/uart_print_user.c **** 	return byte;
 258              		.loc 1 104 2 is_stmt 1 view .LVU59
 105:user/src/uart_print_user.c **** }
 259              		.loc 1 105 1 is_stmt 0 view .LVU60
 260 0004 C0B2     		uxtb	r0, r0
 261              		.loc 1 105 1 view .LVU61
 262 0006 7047     		bx	lr
 263              	.L23:
 264              		.align	2
 265              	.L22:
 266 0008 00380140 		.word	1073821696
 267              		.cfi_endproc
 268              	.LFE834:
 270              		.section	.text.receiveByteIntoBuffer,"ax",%progbits
 271              		.align	1
 272              		.global	receiveByteIntoBuffer
 273              		.syntax unified
 274              		.thumb
 275              		.thumb_func
 276              		.fpu softvfp
 278              	receiveByteIntoBuffer:
 279              	.LFB835:
 106:user/src/uart_print_user.c **** 
 107:user/src/uart_print_user.c **** void receiveByteIntoBuffer(void)
 108:user/src/uart_print_user.c **** {
 280              		.loc 1 108 1 is_stmt 1 view -0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 8
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284 0000 00B5     		push	{lr}
 285              	.LCFI2:
 286              		.cfi_def_cfa_offset 4
 287              		.cfi_offset 14, -4
 288 0002 83B0     		sub	sp, sp, #12
 289              	.LCFI3:
 290              		.cfi_def_cfa_offset 16
 109:user/src/uart_print_user.c **** 	uint8_t data = 0;
 291              		.loc 1 109 2 view .LVU63
 110:user/src/uart_print_user.c **** 	data = LL_USART_ReceiveData8(UART_DRIVER);
 292              		.loc 1 110 2 view .LVU64
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 79


 293              	.LVL24:
 294              	.LBB28:
 295              	.LBI28:
2402:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 296              		.loc 3 2402 25 view .LVU65
 297              	.LBB29:
2404:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 298              		.loc 3 2404 3 view .LVU66
2404:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 299              		.loc 3 2404 20 is_stmt 0 view .LVU67
 300 0004 084B     		ldr	r3, .L28
 301 0006 5B68     		ldr	r3, [r3, #4]
 302              	.LVL25:
2404:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 303              		.loc 3 2404 20 view .LVU68
 304              	.LBE29:
 305              	.LBE28:
 306              		.loc 1 110 7 view .LVU69
 307 0008 8DF80730 		strb	r3, [sp, #7]
 111:user/src/uart_print_user.c **** 	if(ring_buffer_put(&uartRxBuff, &data, 1) != RB_OK){
 308              		.loc 1 111 2 is_stmt 1 view .LVU70
 309              		.loc 1 111 5 is_stmt 0 view .LVU71
 310 000c 0122     		movs	r2, #1
 311 000e 0DF10701 		add	r1, sp, #7
 312 0012 0648     		ldr	r0, .L28+4
 313 0014 FFF7FEFF 		bl	ring_buffer_put
 314              	.LVL26:
 315              		.loc 1 111 4 view .LVU72
 316 0018 10B9     		cbnz	r0, .L27
 317              	.L24:
 112:user/src/uart_print_user.c **** 		Error_Handler();
 113:user/src/uart_print_user.c **** 	}
 114:user/src/uart_print_user.c **** 
 115:user/src/uart_print_user.c **** }
 318              		.loc 1 115 1 view .LVU73
 319 001a 03B0     		add	sp, sp, #12
 320              	.LCFI4:
 321              		.cfi_remember_state
 322              		.cfi_def_cfa_offset 4
 323              		@ sp needed
 324 001c 5DF804FB 		ldr	pc, [sp], #4
 325              	.L27:
 326              	.LCFI5:
 327              		.cfi_restore_state
 112:user/src/uart_print_user.c **** 		Error_Handler();
 328              		.loc 1 112 3 is_stmt 1 view .LVU74
 329 0020 FFF7FEFF 		bl	Error_Handler
 330              	.LVL27:
 331              		.loc 1 115 1 is_stmt 0 view .LVU75
 332 0024 F9E7     		b	.L24
 333              	.L29:
 334 0026 00BF     		.align	2
 335              	.L28:
 336 0028 00380140 		.word	1073821696
 337 002c 00000000 		.word	uartRxBuff
 338              		.cfi_endproc
 339              	.LFE835:
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 80


 341              		.comm	uartRxBuff,24,4
 342              		.text
 343              	.Letext0:
 344              		.file 4 "c:\\users\\domen\\appdata\\roaming\\gnu mcu eclipse\\arm embedded gcc\\8.3.1-1.1\\arm-non
 345              		.file 5 "c:\\users\\domen\\appdata\\roaming\\gnu mcu eclipse\\arm embedded gcc\\8.3.1-1.1\\arm-non
 346              		.file 6 "user/inc/ring_buffer.h"
 347              		.file 7 "Drivers/CMSIS/Device/ST/STM32L1xx/Include/stm32l100xc.h"
 348              		.file 8 "user/inc/uart_print_user.h"
 349              		.file 9 "Drivers/CMSIS/Device/ST/STM32L1xx/Include/system_stm32l1xx.h"
 350              		.file 10 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_dma.h"
 351              		.file 11 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_tim.h"
 352              		.file 12 "Core/Inc/main.h"
 353              		.file 13 "Core/Inc/stm32l1xx_it.h"
 354              		.file 14 "Core/Inc/usart.h"
ARM GAS  C:\Users\domen\AppData\Local\Temp\ccb52bx9.s 			page 81


DEFINED SYMBOLS
                            *ABS*:0000000000000000 uart_print_user.c
C:\Users\domen\AppData\Local\Temp\ccb52bx9.s:16     .text.initUart:0000000000000000 $t
C:\Users\domen\AppData\Local\Temp\ccb52bx9.s:24     .text.initUart:0000000000000000 initUart
C:\Users\domen\AppData\Local\Temp\ccb52bx9.s:90     .text.initUart:000000000000002c $d
                            *COM*:0000000000000018 uartRxBuff
C:\Users\domen\AppData\Local\Temp\ccb52bx9.s:97     .text.sendData:0000000000000000 $t
C:\Users\domen\AppData\Local\Temp\ccb52bx9.s:104    .text.sendData:0000000000000000 sendData
C:\Users\domen\AppData\Local\Temp\ccb52bx9.s:225    .text.sendData:0000000000000050 $d
C:\Users\domen\AppData\Local\Temp\ccb52bx9.s:230    .text.receiveByte:0000000000000000 $t
C:\Users\domen\AppData\Local\Temp\ccb52bx9.s:237    .text.receiveByte:0000000000000000 receiveByte
C:\Users\domen\AppData\Local\Temp\ccb52bx9.s:266    .text.receiveByte:0000000000000008 $d
C:\Users\domen\AppData\Local\Temp\ccb52bx9.s:271    .text.receiveByteIntoBuffer:0000000000000000 $t
C:\Users\domen\AppData\Local\Temp\ccb52bx9.s:278    .text.receiveByteIntoBuffer:0000000000000000 receiveByteIntoBuffer
C:\Users\domen\AppData\Local\Temp\ccb52bx9.s:336    .text.receiveByteIntoBuffer:0000000000000028 $d

UNDEFINED SYMBOLS
ring_buffer_init
MX_USART1_UART_Init
Error_Handler
LL_GetTick
ring_buffer_put
